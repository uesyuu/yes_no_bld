{"version":3,"file":"static/js/550.e4529302.chunk.js","mappings":"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","sources":["../node_modules/cubing/src/cubing/puzzle-geometry/FaceNameSwizzler.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/NullMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/FTONotationMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/FaceRenamingMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/MegaminxScramblingNotationMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/NxNxNCubeMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/PyraminxNotationMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/SkewbNotationMapper.ts","../node_modules/cubing/src/cubing/puzzle-geometry/Options.ts","../node_modules/cubing/src/cubing/puzzle-geometry/Perm.ts","../node_modules/cubing/src/cubing/puzzle-geometry/PermOriSet.ts","../node_modules/cubing/src/cubing/puzzle-geometry/PGPuzzles.ts","../node_modules/cubing/src/cubing/puzzle-geometry/Quat.ts","../node_modules/cubing/src/cubing/puzzle-geometry/PlatonicGenerator.ts","../node_modules/cubing/src/cubing/puzzle-geometry/SchreierSims.ts","../node_modules/cubing/src/cubing/puzzle-geometry/PuzzleGeometry.ts"],"sourcesContent":["// Manages a set of face names.  Detects whether they are prefix-free.\n// Implements greedy splitting into face names and comparisons between\n// concatenated face names and grip names.\n\nexport class FaceNameSwizzler {\n  public prefixFree: boolean = true;\n  public gripnames: string[] = [];\n  constructor(public facenames: string[], gripnames_arg?: string[]) {\n    if (gripnames_arg) {\n      this.gripnames = gripnames_arg;\n    }\n    for (let i = 0; this.prefixFree && i < facenames.length; i++) {\n      for (let j = 0; this.prefixFree && j < facenames.length; j++) {\n        if (i !== j && facenames[i].startsWith(facenames[j])) {\n          this.prefixFree = false;\n        }\n      }\n    }\n  }\n\n  public setGripNames(names: string[]): void {\n    this.gripnames = names;\n  }\n\n  // split a string into face names and return a list of\n  // indices.\n  public splitByFaceNames(s: string): number[] {\n    const r = [];\n    let at = 0;\n    while (at < s.length) {\n      if (at > 0 && at < s.length && s[at] === \"_\") {\n        at++;\n      }\n      let currentMatch = -1;\n      for (let i = 0; i < this.facenames.length; i++) {\n        if (\n          s.substr(at).startsWith(this.facenames[i]) &&\n          (currentMatch < 0 ||\n            this.facenames[i].length > this.facenames[currentMatch].length)\n        ) {\n          currentMatch = i;\n        }\n      }\n      if (currentMatch >= 0) {\n        r.push(currentMatch);\n        at += this.facenames[currentMatch].length;\n      } else {\n        throw new Error(`Could not split ${s} into face names.`);\n      }\n    }\n    return r;\n  }\n\n  // cons a grip from an array of numbers.\n  public joinByFaceIndices(list: number[]): string {\n    let sep = \"\";\n    const r = [];\n    for (let i = 0; i < list.length; i++) {\n      r.push(sep);\n      r.push(this.facenames[list[i]]);\n      if (!this.prefixFree) {\n        sep = \"_\";\n      }\n    }\n    return r.join(\"\");\n  }\n\n  /*\n   *   Try to match something the user gave us with some geometric\n   *   feature.  We used to have strict requirements:\n   *\n   *      a)  The set of face names are prefix free\n   *      b)  When specifying a corner, all coincident planes were\n   *          specified\n   *\n   *   But, to allow megaminx to have more reasonable and\n   *   conventional names, and to permit shorter canonical\n   *   names, we are relaxing these requirements and adding\n   *   new syntax.  Now:\n   *\n   *      a)  Face names need not be syntax free.\n   *      b)  When parsing a geometric name, we use greedy\n   *          matching, so the longest name that matches the\n   *          user string at the current position is the one\n   *          assumed to match.\n   *      c)  Underscores are permitted to separate face names\n   *          (both in user input and in geometric\n   *          descriptions).\n   *      d)  Default names of corner moves where corners have\n   *          more than three corners, need only include three\n   *          of the corners.\n   *\n   *   This code is not performance-sensitive so we can do it a\n   *   slow and simple way.\n   */\n  public spinmatch(userinput: string, longname: string): boolean {\n    // are these the same rotationally?\n    if (userinput === longname) {\n      return true;\n    }\n    try {\n      const e1 = this.splitByFaceNames(userinput);\n      const e2 = this.splitByFaceNames(longname);\n      // All elements of userinput need to be in the longname.\n      // There should be no duplicate elements in the userinput.\n      // if both have length 1 or length 2, the sets must be equal.\n      // if both have length 3 or more, then the first set must be\n      // a subset of the second.  Order doesn't matter.\n      if (e1.length !== e2.length && e1.length < 3) {\n        return false;\n      }\n      for (let i = 0; i < e1.length; i++) {\n        for (let j = 0; j < i; j++) {\n          if (e1[i] === e1[j]) {\n            return false;\n          }\n        }\n        let found = false;\n        for (let j = 0; j < e2.length; j++) {\n          if (e1[i] === e2[j]) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          return false;\n        }\n      }\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /* same as above, but permit both to have v's on the end. */\n  public spinmatchv(userinput: string, longname: string): boolean {\n    if (userinput.endsWith(\"v\") && longname.endsWith(\"v\")) {\n      return this.spinmatch(\n        userinput.slice(0, userinput.length - 1),\n        longname.slice(0, longname.length - 1),\n      );\n    } else {\n      return this.spinmatch(userinput, longname);\n    }\n  }\n\n  public unswizzle(s: string): string {\n    if ((s.endsWith(\"v\") || s.endsWith(\"w\")) && s[0] <= \"Z\") {\n      s = s.slice(0, s.length - 1);\n    }\n    const upperCaseGrip = s.toUpperCase();\n    for (let i = 0; i < this.gripnames.length; i++) {\n      const g = this.gripnames[i];\n      if (this.spinmatch(upperCaseGrip, g)) {\n        return g;\n      }\n    }\n    return s;\n  }\n}\n","import type { Move } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class NullMapper implements NotationMapper {\n  public notationToInternal(move: Move): Move | null {\n    return move;\n  }\n\n  public notationToExternal(move: Move): Move | null {\n    return move;\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class FTONotationMapper implements NotationMapper {\n  constructor(private child: NotationMapper, private sw: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (\n      move.family === \"T\" &&\n      move.innerLayer === undefined &&\n      move.outerLayer === undefined\n    ) {\n      return new Move(\n        new QuantumMove(\"FLRv\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    } else {\n      const r = this.child.notationToInternal(move);\n      return r;\n    }\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    let fam = move.family;\n    if (fam.length > 0 && fam[fam.length - 1] === \"v\") {\n      fam = fam.substring(0, fam.length - 1);\n    }\n    if (this.sw.spinmatch(fam, \"FLUR\")) {\n      return new Move(\n        new QuantumMove(\"T\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n    return this.child.notationToExternal(move);\n  }\n}\n","// face renaming mapper.  Accepts two face name remappers.  We\n// work between the two.\n\nimport { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class FaceRenamingMapper implements NotationMapper {\n  constructor(\n    public internalNames: FaceNameSwizzler,\n    public externalNames: FaceNameSwizzler,\n  ) {}\n\n  // TODO:  consider putting a cache in front of this\n  public convertString(\n    grip: string,\n    a: FaceNameSwizzler,\n    b: FaceNameSwizzler,\n  ): string {\n    let suffix = \"\";\n    if ((grip.endsWith(\"v\") || grip.endsWith(\"v\")) && grip <= \"_\") {\n      suffix = grip.slice(grip.length - 1);\n      grip = grip.slice(0, grip.length - 1);\n    }\n    const upper = grip.toUpperCase();\n    let isLowerCase = false;\n    if (grip !== upper) {\n      isLowerCase = true;\n      grip = upper;\n    }\n    grip = b.joinByFaceIndices(a.splitByFaceNames(grip));\n    if (isLowerCase) {\n      grip = grip.toLowerCase();\n    }\n    return grip + suffix;\n  }\n\n  public convert(move: Move, a: FaceNameSwizzler, b: FaceNameSwizzler): Move {\n    const grip = move.family;\n    const ngrip = this.convertString(grip, a, b);\n    if (grip === ngrip) {\n      return move;\n    } else {\n      return new Move(\n        new QuantumMove(ngrip, move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n  }\n\n  public notationToInternal(move: Move): Move {\n    const r = this.convert(move, this.externalNames, this.internalNames);\n    return r;\n  }\n\n  public notationToExternal(move: Move): Move {\n    return this.convert(move, this.internalNames, this.externalNames);\n  }\n}\n","// Sits on top of a (possibly null) notation mapper, and\n\nimport { Move, QuantumMove } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\n// adds R++/R--/D++/D-- notation mapping.\nexport class MegaminxScramblingNotationMapper implements NotationMapper {\n  constructor(private child: NotationMapper) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (move.innerLayer === undefined && move.outerLayer === undefined) {\n      if (Math.abs(move.amount) === 1) {\n        if (move.family === \"R++\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"R--\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), 2 * move.amount);\n        } else if (move.family === \"D++\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"D--\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), 2 * move.amount);\n        }\n\n        // TODO: Figure out if `cubing/alg` should parse `R++` to a family of `R++`.\n        if (move.family === \"R_PLUSPLUS_\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"D_PLUSPLUS_\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), -2 * move.amount);\n        }\n      }\n      if (move.family === \"y\") {\n        return new Move(\"Uv\", move.amount);\n      }\n      if (move.family === \"x\" && Math.abs(move.amount) === 2) {\n        return new Move(\"ERv\", move.amount / 2);\n      }\n    }\n    return this.child.notationToInternal(move);\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    if (move.family === \"ERv\" && Math.abs(move.amount) === 1) {\n      return new Move(\n        new QuantumMove(\"x\", move.innerLayer, move.outerLayer),\n        move.amount * 2,\n      );\n    }\n    if (move.family === \"ILv\" && Math.abs(move.amount) === 1) {\n      return new Move(\n        new QuantumMove(\"x\", move.innerLayer, move.outerLayer),\n        -move.amount * 2,\n      );\n    }\n    if (move.family === \"Uv\") {\n      return new Move(\n        new QuantumMove(\"y\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n    if (move.family === \"Dv\") {\n      return new Move(\"y\", -move.amount);\n    }\n    return this.child.notationToExternal(move);\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class NxNxNCubeMapper implements NotationMapper {\n  constructor(public slices: number) {}\n\n  public notationToInternal(move: Move): Move {\n    const grip = move.family;\n    if (!(move.innerLayer || move.outerLayer)) {\n      if (grip === \"x\") {\n        move = new Move(\"Rv\", move.amount);\n      } else if (grip === \"y\") {\n        move = new Move(\"Uv\", move.amount);\n      } else if (grip === \"z\") {\n        move = new Move(\"Fv\", move.amount);\n      }\n      if ((this.slices & 1) === 1) {\n        if (grip === \"E\") {\n          move = new Move(\n            new QuantumMove(\"D\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        } else if (grip === \"M\") {\n          move = new Move(\n            new QuantumMove(\"L\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        } else if (grip === \"S\") {\n          move = new Move(\n            new QuantumMove(\"F\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        }\n      }\n      if (this.slices > 2) {\n        if (grip === \"e\") {\n          move = new Move(\n            new QuantumMove(\"D\", this.slices - 1, 2),\n            move.amount,\n          );\n        } else if (grip === \"m\") {\n          move = new Move(\n            new QuantumMove(\"L\", this.slices - 1, 2),\n            move.amount,\n          );\n        } else if (grip === \"s\") {\n          move = new Move(\n            new QuantumMove(\"F\", this.slices - 1, 2),\n            move.amount,\n          );\n        }\n      }\n    }\n    return move;\n  }\n\n  // do we want to map slice moves to E/M/S instead of 2U/etc.?\n  public notationToExternal(move: Move): Move {\n    const grip = move.family;\n    if (!(move.innerLayer || move.outerLayer)) {\n      if (grip === \"Rv\") {\n        return new Move(\"x\", move.amount);\n      } else if (grip === \"Uv\") {\n        return new Move(\"y\", move.amount);\n      } else if (grip === \"Fv\") {\n        return new Move(\"z\", move.amount);\n      } else if (grip === \"Lv\") {\n        return new Move(\"x\", -move.amount);\n      } else if (grip === \"Dv\") {\n        return new Move(\"y\", -move.amount);\n      } else if (grip === \"Bv\") {\n        return new Move(\"z\", -move.amount);\n      }\n    }\n    return move;\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nconst pyraminxFamilyMap: Record<string, string> = {\n  U: \"frl\",\n  L: \"fld\",\n  R: \"fdr\",\n  B: \"dlr\",\n  u: \"FRL\",\n  l: \"FLD\",\n  r: \"FDR\",\n  b: \"DLR\",\n  Uv: \"FRLv\",\n  Lv: \"FLDv\",\n  Rv: \"FDRv\",\n  Bv: \"DLRv\",\n  D: \"D\",\n  F: \"F\",\n  BL: \"L\",\n  BR: \"R\",\n};\nconst tetraminxFamilyMap: Record<string, string> = {\n  U: \"FRL\",\n  L: \"FLD\",\n  R: \"FDR\",\n  B: \"DLR\",\n  u: \"frl\",\n  l: \"fld\",\n  r: \"fdr\",\n  b: \"dlr\",\n  Uv: \"FRLv\",\n  Lv: \"FLDv\",\n  Rv: \"FDRv\",\n  Bv: \"DLRv\",\n  D: \"D\",\n  F: \"F\",\n  BL: \"L\",\n  BR: \"R\",\n  d: \"d\",\n  f: \"f\",\n  bl: \"l\",\n  br: \"r\",\n};\n\nconst pyraminxFamilyMapWCA: Record<string, string> = {\n  U: \"FRL\",\n  L: \"FLD\",\n  R: \"FDR\",\n  B: \"DLR\",\n};\n\nconst pyraminxExternalQuantumY = new QuantumMove(\"y\");\nconst pyraminxInternalQuantumY = new QuantumMove(\"Dv\");\n\nexport class PyraminxNotationMapper implements NotationMapper {\n  protected wcaHack: boolean = false;\n  map: Record<string, string> = pyraminxFamilyMap;\n\n  constructor(private child: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (this.wcaHack && move.innerLayer === 2 && move.outerLayer === null) {\n      const newFamilyWCA = pyraminxFamilyMapWCA[move.family];\n      if (newFamilyWCA) {\n        return new Move(\n          new QuantumMove(newFamilyWCA, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    const newFamily = this.map[move.family];\n\n    if (newFamily) {\n      return new Move(\n        new QuantumMove(newFamily, move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    } else if (pyraminxExternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(pyraminxInternalQuantumY, -move.amount);\n    } else {\n      return null;\n    }\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    if (this.wcaHack && move.innerLayer === 2 && move.outerLayer === null) {\n      for (const [external, internal] of Object.entries(pyraminxFamilyMapWCA)) {\n        if (this.child.spinmatch(move.family, internal)) {\n          return new Move(\n            new QuantumMove(external, move.innerLayer, move.outerLayer),\n            move.amount,\n          );\n        }\n      }\n    }\n    for (const [external, internal] of Object.entries(this.map)) {\n      if (this.child.spinmatch(move.family, internal)) {\n        return new Move(\n          new QuantumMove(external, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    if (pyraminxInternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(pyraminxExternalQuantumY, -move.amount);\n    } else {\n      return null;\n    }\n  }\n}\n\nexport class TetraminxNotationMapper extends PyraminxNotationMapper {\n  wcaHack = true;\n\n  constructor(child: FaceNameSwizzler) {\n    super(child);\n    this.map = tetraminxFamilyMap;\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nconst skewbFamilyMap: Record<string, string> = {\n  U: \"UBL\",\n  UL: \"ULF\",\n  F: \"UFR\",\n  UR: \"URB\",\n  B: \"DBL\",\n  D: \"DFR\",\n  L: \"DLF\",\n  R: \"DRB\",\n  Uv: \"UBLv\",\n  ULv: \"ULFv\",\n  Fv: \"UFRv\",\n  URv: \"URBv\",\n  Bv: \"DBLv\",\n  Dv: \"DFRv\",\n  Lv: \"DLFv\",\n  Rv: \"DRBv\",\n};\n\n// TODO: combine using a similar table.\nconst skewbExternalQuantumX = new QuantumMove(\"x\");\nconst skewbInternalQuantumX = new QuantumMove(\"Rv\");\nconst skewbInternalQuantumXPrime = new QuantumMove(\"Lv\");\nconst skewbExternalQuantumY = new QuantumMove(\"y\");\nconst skewbInternalQuantumY = new QuantumMove(\"Uv\");\nconst skewbInternalQuantumYPrime = new QuantumMove(\"Dv\");\nconst skewbExternalQuantumZ = new QuantumMove(\"z\");\nconst skewbInternalQuantumZ = new QuantumMove(\"Fv\");\nconst skewbInternalQuantumZPrime = new QuantumMove(\"Bv\");\n\nexport class SkewbNotationMapper implements NotationMapper {\n  constructor(private child: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (move.innerLayer || move.outerLayer) {\n      return null;\n    }\n    const newFamily = skewbFamilyMap[move.family];\n    if (newFamily) {\n      return new Move(\n        new QuantumMove(newFamily, move.outerLayer, move.innerLayer),\n        move.amount,\n      );\n    }\n    if (skewbExternalQuantumX.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumX, move.amount);\n    }\n    if (skewbExternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumY, move.amount);\n    }\n    if (skewbExternalQuantumZ.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumZ, move.amount);\n    }\n    return null;\n    /*\n       *   (1) We are not including x/y/z in Skewb; they aren't WCA notation and\n       *   it's unclear anyone needs them for reconstructions.\n       *\n    } else if (move.family === \"x\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Rv\", move.amount);\n    } else if (move.family === \"y\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Uv\", move.amount);\n    } else if (move.family === \"z\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Fv\", move.amount);\n       */\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    for (const [external, internal] of Object.entries(skewbFamilyMap)) {\n      if (this.child.spinmatchv(move.family, internal)) {\n        return new Move(\n          new QuantumMove(external, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    if (skewbInternalQuantumX.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumX, move.amount);\n    }\n    if (skewbInternalQuantumXPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumX, -move.amount);\n    }\n    if (skewbInternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumY, move.amount);\n    }\n    if (skewbInternalQuantumYPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumY, -move.amount);\n    }\n    if (skewbInternalQuantumZ.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumZ, move.amount);\n    }\n    if (skewbInternalQuantumZPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumZ, -move.amount);\n    }\n    return null;\n    /*\n       *   See (1) above.\n       *\n    if (move.family === \"Rv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"x\", move.amount);\n    } else if (move.family === \"Uv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"y\", move.amount);\n    } else if (move.family === \"Fv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"z\", move.amount);\n       */\n    // } else {\n    //   return null;\n    // }\n  }\n}\n","import { parsePuzzleDescription, PuzzleDescription } from \"./PuzzleGeometry\";\n\nexport function parseOptions(argv: string[]): {\n  puzzleDescription: PuzzleDescription | null;\n  options: PuzzleGeometryOptions;\n} {\n  let argp = 0;\n  const options: PuzzleGeometryOptions = {};\n  while (argp < argv.length && argv[argp][0] === \"-\") {\n    const option = argv[argp++];\n    if (option === \"--rotations\") {\n      options.addRotations = true;\n    } else if (option === \"--allmoves\") {\n      options.allMoves = true;\n    } else if (option === \"--outerblockmoves\") {\n      options.outerBlockMoves = true;\n    } else if (option === \"--vertexmoves\") {\n      options.vertexMoves = true;\n    } else if (option === \"--nocorners\") {\n      options.includeCornerOrbits = false;\n    } else if (option === \"--noedges\") {\n      options.includeEdgeOrbits = false;\n    } else if (option === \"--noorientation\") {\n      options.fixedOrientation = true;\n    } else if (option === \"--nocenters\") {\n      options.includeCenterOrbits = false;\n    } else if (option === \"--omit\") {\n      options.excludeOrbits = argv[argp].split(\",\");\n      argp++;\n    } else if (option === \"--moves\") {\n      options.moveList = argv[argp].split(\",\");\n      argp++;\n    } else if (option === \"--optimize\") {\n      options.optimizeOrbits = true;\n    } else if (option === \"--scramble\") {\n      options.scrambleAmount = 100;\n    } else if (option === \"--fixcorner\") {\n      options.fixedPieceType = \"v\";\n    } else if (option === \"--fixedge\") {\n      options.fixedPieceType = \"e\";\n    } else if (option === \"--fixcenter\") {\n      options.fixedPieceType = \"f\";\n    } else if (option === \"--orientcenters\") {\n      options.orientCenters = true;\n    } else if (option === \"--puzzleorientation\") {\n      options.puzzleOrientation = JSON.parse(argv[argp]); // TODO: Validate input.\n      argp++;\n    } else {\n      throw new Error(`Bad option: ${option}`);\n    }\n  }\n  const puzzleDescription = parsePuzzleDescription(argv.slice(argp).join(\" \"));\n  return { puzzleDescription, options };\n}\n\ntype FaceName = string;\ntype OrientationDirection = [number, number, number];\nexport type FaceBasedOrientationDescription = [\n  [FaceName, OrientationDirection],\n  [FaceName, OrientationDirection],\n];\nexport type BaseFaceCount = 4 | 6 | 8 | 12 | 20;\nexport type FaceBasedOrientationDescriptionLookup = Record<\n  BaseFaceCount,\n  FaceBasedOrientationDescription\n>;\n\nfunction asstructured(v: any): any {\n  if (typeof v === \"string\") {\n    return JSON.parse(v);\n  }\n  return v;\n}\nfunction asboolean(v: any): boolean {\n  if (typeof v === \"string\") {\n    if (v === \"false\") {\n      return false;\n    }\n    return true;\n  } else {\n    return v ? true : false;\n  }\n}\n\nexport class PuzzleGeometryFullOptions {\n  verbosity: number = 0; // verbosity (console.log)\n\n  allMoves: boolean = false; // generate all slice moves in ksolve\n  outerBlockMoves: boolean; // generate outer block moves\n  vertexMoves: boolean = false; // generate vertex moves\n  addRotations: boolean = false; // add symmetry information to ksolve output\n  moveList: string[] | null = null; // move list to generate\n\n  fixedOrientation: boolean = false; // eliminate any orientations\n  fixedPieceType: null | \"e\" | \"v\" | \"f\" = null; // fix a piece?\n  orientCenters: boolean = false; // orient centers?\n\n  // TODO: Group these into a single object?\n  includeCornerOrbits: boolean = true; // include corner orbits\n  includeCenterOrbits: boolean = true; // include center orbits\n  includeEdgeOrbits: boolean = true; // include edge orbits\n  // Overrides the previous options.\n  excludeOrbits: string[] = []; // exclude these orbits\n  optimizeOrbits: boolean = false; // optimize PermOri\n\n  grayCorners: boolean = false; // make corner sets gray\n  grayCenters: boolean = false; // make center sets gray\n  grayEdges: boolean = false; // make edge sets gray\n\n  puzzleOrientation: FaceBasedOrientationDescription | null = null; // single puzzle orientation from options\n  puzzleOrientations: FaceBasedOrientationDescriptionLookup | null = null; // puzzle orientation override object from options // TODO: is this needed?\n\n  scrambleAmount: number = 0; // scramble?\n\n  constructor(options: PuzzleGeometryOptions = {}) {\n    Object.assign(this, options);\n  }\n}\n\nexport type PuzzleGeometryOptions = Partial<PuzzleGeometryFullOptions>;\n\nexport function parsePGOptionList(optionlist?: any[]): PuzzleGeometryOptions {\n  const options: PuzzleGeometryOptions = {};\n  if (optionlist !== undefined) {\n    if (optionlist.length % 2 !== 0) {\n      throw new Error(\"Odd length in option list?\");\n    }\n    for (let i = 0; i < optionlist.length; i += 2) {\n      if (optionlist[i] === \"verbose\") {\n        options.verbosity = (options.verbosity ?? 0) + 1;\n      } else if (optionlist[i] === \"quiet\") {\n        options.verbosity = 0;\n      } else if (optionlist[i] === \"allmoves\") {\n        options.allMoves = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"outerblockmoves\") {\n        options.outerBlockMoves = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"vertexmoves\") {\n        options.vertexMoves = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"rotations\") {\n        options.addRotations = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"cornersets\") {\n        options.includeCornerOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"centersets\") {\n        options.includeCenterOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"edgesets\") {\n        options.includeEdgeOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"omit\") {\n        options.excludeOrbits = optionlist[i + 1];\n      } else if (optionlist[i] === \"graycorners\") {\n        options.grayCorners = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"graycenters\") {\n        options.grayCenters = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"grayedges\") {\n        options.grayEdges = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"movelist\") {\n        options.moveList = asstructured(optionlist[i + 1]);\n      } else if (optionlist[i] === \"killorientation\") {\n        options.fixedOrientation = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"optimize\") {\n        options.optimizeOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"scramble\") {\n        options.scrambleAmount = optionlist[i + 1];\n      } else if (optionlist[i] === \"fix\") {\n        options.fixedPieceType = optionlist[i + 1];\n      } else if (optionlist[i] === \"orientcenters\") {\n        options.orientCenters = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"puzzleorientation\") {\n        options.puzzleOrientation = asstructured(optionlist[i + 1]);\n      } else if (optionlist[i] === \"puzzleorientations\") {\n        options.puzzleOrientations = asstructured(optionlist[i + 1]);\n      } else {\n        throw new Error(\n          `Bad option while processing option list ${optionlist[i]}`,\n        );\n      }\n    }\n  }\n  return options;\n}\n","const zeroCache: number[][] = [];\nconst iotaCache: number[][] = [];\n\nexport function zeros(n: number): number[] {\n  if (!zeroCache[n]) {\n    const c = Array(n);\n    for (let i = 0; i < n; i++) {\n      c[i] = 0;\n    }\n    zeroCache[n] = c;\n  }\n  return zeroCache[n];\n}\n\nexport function iota(n: number): number[] {\n  if (!iotaCache[n]) {\n    const c = Array(n);\n    for (let i = 0; i < n; i++) {\n      c[i] = i;\n    }\n    iotaCache[n] = c;\n  }\n  return iotaCache[n];\n}\n\nexport function identity(n: number): Perm {\n  return new Perm(iota(n));\n}\n\nexport function random(n: number): Perm {\n  // random\n  const c = Array(n);\n  for (let i = 0; i < n; i++) {\n    c[i] = i;\n  }\n  for (let i = 0; i < n; i++) {\n    const j = i + Math.floor((n - i) * Math.random());\n    const t = c[i];\n    c[i] = c[j];\n    c[j] = t;\n  }\n  return new Perm(c);\n}\n\nexport function factorial(a: number): bigint {\n  let r = BigInt(1);\n  while (a > 1) {\n    r *= BigInt(a);\n    a--;\n  }\n  return r;\n}\n\nfunction gcd(a: number, b: number): number {\n  if (a > b) {\n    const t = a;\n    a = b;\n    b = t;\n  }\n  while (a > 0) {\n    const m = b % a;\n    b = a;\n    a = m;\n  }\n  return b;\n}\n\nexport function lcm(a: number, b: number): number {\n  return (a / gcd(a, b)) * b;\n}\n\nexport class Perm {\n  public n: number; // length\n  public p: number[]; // The permutation itself\n  constructor(a: number[]) {\n    this.n = a.length;\n    this.p = a;\n  }\n\n  public toString(): string {\n    // stringify\n    return `Perm[${this.p.join(\" \")}]`;\n  }\n\n  public mul(p2: Perm): Perm {\n    // multiply\n    const c: number[] = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[i] = p2.p[this.p[i]];\n    }\n    return new Perm(c);\n  }\n\n  public rmul(p2: Perm): Perm {\n    // multiply the other way\n    const c = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[i] = this.p[p2.p[i]];\n    }\n    return new Perm(c);\n  }\n\n  public inv(): Perm {\n    const c = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[this.p[i]] = i;\n    }\n    return new Perm(c);\n  }\n\n  public compareTo(p2: Perm): number {\n    // comparison\n    for (let i = 0; i < this.n; i++) {\n      if (this.p[i] !== p2.p[i]) {\n        return this.p[i] - p2.p[i];\n      }\n    }\n    return 0;\n  }\n\n  public toGap(): string {\n    const cyc = new Array<string>();\n    const seen = new Array<boolean>(this.n);\n    for (let i = 0; i < this.p.length; i++) {\n      if (seen[i] || this.p[i] === i) {\n        continue;\n      }\n      const incyc = new Array<number>();\n      for (let j = i; !seen[j]; j = this.p[j]) {\n        incyc.push(1 + j);\n        seen[j] = true;\n      }\n      cyc.push(`(${incyc.join(\",\")})`);\n    }\n    return cyc.join(\"\");\n  }\n\n  public order(): number {\n    let r = 1;\n    const seen = new Array<boolean>(this.n);\n    for (let i = 0; i < this.p.length; i++) {\n      if (seen[i] || this.p[i] === i) {\n        continue;\n      }\n      let cs = 0;\n      for (let j = i; !seen[j]; j = this.p[j]) {\n        cs++;\n        seen[j] = true;\n      }\n      r = lcm(r, cs);\n    }\n    return r;\n  }\n}\n","import { Move } from \"../alg\";\nimport type { KPuzzleDefinition, KTransformationData } from \"../kpuzzle\"; // TODO\nimport { NullMapper } from \"./notation-mapping\";\nimport type { NotationMapper } from \"./notation-mapping/NotationMapper\";\n/* tslint:disable no-bitwise */\n/* tslint:disable prefer-for-of */ import {\n  factorial,\n  iota,\n  lcm,\n  Perm,\n  zeros,\n} from \"./Perm\";\nexport class PGOrbitDef {\n  constructor(public size: number, public mod: number) {}\n  public reassemblySize(): bigint {\n    return factorial(this.size) * BigInt(this.mod) ** BigInt(this.size);\n  }\n}\n\nlet lastGlobalDefinitionCounter = 0;\n\nexport function externalName(\n  mapper: NotationMapper,\n  moveString: string,\n): string {\n  const mv = Move.fromString(moveString);\n  const mv2 = mapper.notationToExternal(mv);\n  if (mv2 === null || mv === mv2) {\n    return moveString;\n  }\n  return mv2.toString();\n}\n\nexport class PGOrbitsDef {\n  constructor(\n    public orbitnames: string[],\n    private orbitdefs: PGOrbitDef[],\n    public solved: VisibleState,\n    public movenames: string[],\n    public moveops: PGTransform[],\n    public isRotation: boolean[],\n    public forcenames: boolean[],\n  ) {}\n\n  public transformToKTransformationData(t: PGTransform): KTransformationData {\n    const mp: { [orbitName: string]: any } = {};\n    for (let j = 0; j < this.orbitnames.length; j++) {\n      mp[this.orbitnames[j]] = t.orbits[j].toKPuzzle();\n    }\n    return mp;\n  }\n\n  public static transformToKTransformationData(\n    orbitnames: string[],\n    t: PGTransform,\n  ): KTransformationData {\n    const mp: { [orbitName: string]: any } = {};\n    for (let j = 0; j < orbitnames.length; j++) {\n      mp[orbitnames[j]] = t.orbits[j].toKPuzzle();\n    }\n    return mp;\n  }\n\n  private describeSet(s: number, r: string[], mapper: NotationMapper): void {\n    const n = this.orbitdefs[s].size;\n    const m = new Array(n);\n    for (let i = 0; i < n; i++) {\n      m[i] = [];\n    }\n    for (let i = 0; i < this.movenames.length; i++) {\n      if (this.isRotation[i]) {\n        continue;\n      }\n      let mvname = this.movenames[i];\n      if (!this.forcenames[i]) {\n        mvname = externalName(mapper, mvname);\n        if (mvname[mvname.length - 1] === \"'\") {\n          mvname = mvname.substring(0, mvname.length - 1);\n        }\n      }\n      const pd = this.moveops[i].orbits[s];\n      for (let j = 0; j < n; j++) {\n        if (pd.perm[j] !== j || pd.ori[j] !== 0) {\n          m[j].push(mvname);\n        }\n      }\n    }\n    for (let j = 0; j < n; j++) {\n      r.push(`# ${j + 1} ${m[j].join(\" \")}`);\n    }\n  }\n\n  public toKsolve(\n    name: string,\n    mapper: NotationMapper = new NullMapper(),\n  ): string[] {\n    const result = [];\n    result.push(`Name ${name}`);\n    result.push(\"\");\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      result.push(\n        `Set ${this.orbitnames[i]} ${this.orbitdefs[i].size} ${this.orbitdefs[i].mod}`,\n      );\n      this.describeSet(i, result, mapper);\n    }\n    result.push(\"\");\n    result.push(\"Solved\");\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      this.solved.orbits[i].appendDefinition(\n        result,\n        this.orbitnames[i],\n        false,\n        false,\n      );\n    }\n    result.push(\"End\");\n    for (let i = 0; i < this.movenames.length; i++) {\n      result.push(\"\");\n      let name = this.movenames[i];\n      if (!this.forcenames[i]) {\n        name = externalName(mapper, this.movenames[i]);\n      }\n      let doinv = false;\n      if (name[name.length - 1] === \"'\") {\n        doinv = true;\n        name = name.substring(0, name.length - 1);\n      }\n      result.push(`Move ${name}`);\n      for (let j = 0; j < this.orbitnames.length; j++) {\n        if (doinv) {\n          this.moveops[i].orbits[j]\n            .inv()\n            .appendDefinition(result, this.orbitnames[j], true);\n        } else {\n          this.moveops[i].orbits[j].appendDefinition(\n            result,\n            this.orbitnames[j],\n            true,\n          );\n        }\n      }\n      result.push(\"End\");\n    }\n    // extra blank line on end lets us use join(\"\\n\") to terminate all\n    return result;\n  }\n\n  // TODO: return type.\n  public toKPuzzleDefinition(includemoves: boolean): KPuzzleDefinition {\n    const orbits: KPuzzleDefinition[\"orbits\"] = {};\n    const start: KPuzzleDefinition[\"startStateData\"] = {};\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      orbits[this.orbitnames[i]] = {\n        numPieces: this.orbitdefs[i].size,\n        numOrientations: this.orbitdefs[i].mod,\n      };\n      const startTransformation = this.solved.orbits[i].toKPuzzle();\n      start[this.orbitnames[i]] = {\n        pieces: startTransformation.permutation,\n        orientation: startTransformation.orientation,\n      };\n    }\n    const moves: { [moveName: string]: any } = {};\n    if (includemoves) {\n      for (let i = 0; i < this.movenames.length; i++) {\n        moves[this.movenames[i]] = this.transformToKTransformationData(\n          this.moveops[i],\n        );\n      }\n    }\n    return {\n      name: `PG3D #${++lastGlobalDefinitionCounter}`,\n      orbits,\n      startStateData: start,\n      moves,\n    };\n  }\n\n  public optimize(): PGOrbitsDef {\n    const neworbitnames: string[] = [];\n    const neworbitdefs: PGOrbitDef[] = [];\n    const newsolved: PGOrbit[] = [];\n    const newmoveops: PGOrbit[][] = [];\n    for (let j = 0; j < this.moveops.length; j++) {\n      newmoveops.push([]);\n    }\n    for (let i = 0; i < this.orbitdefs.length; i++) {\n      const om = this.orbitdefs[i].mod;\n      const n = this.orbitdefs[i].size;\n      const du = new DisjointUnion(n);\n      const changed = new Array<boolean>(this.orbitdefs[i].size);\n      for (let k = 0; k < n; k++) {\n        changed[k] = false;\n      }\n      // don't consider rotations when optimizing\n      for (let j = 0; j < this.moveops.length; j++) {\n        if (!this.isRotation[j]) {\n          for (let k = 0; k < n; k++) {\n            if (\n              this.moveops[j].orbits[i].perm[k] !== k ||\n              this.moveops[j].orbits[i].ori[k] !== 0\n            ) {\n              changed[k] = true;\n              du.union(k, this.moveops[j].orbits[i].perm[k]);\n            }\n          }\n        }\n      }\n      let keepori = true;\n      // right now we kill ori only if solved is unique and\n      // if we can kill it completely.  This is not all the optimization\n      // we can perform.\n      if (om > 1) {\n        keepori = false;\n        const duo = new DisjointUnion(this.orbitdefs[i].size * om);\n        for (let j = 0; j < this.moveops.length; j++) {\n          for (let k = 0; k < n; k++) {\n            if (\n              this.moveops[j].orbits[i].perm[k] !== k ||\n              this.moveops[j].orbits[i].ori[k] !== 0\n            ) {\n              for (let o = 0; o < om; o++) {\n                duo.union(\n                  k * om + o,\n                  this.moveops[j].orbits[i].perm[k] * om +\n                    ((o + this.moveops[j].orbits[i].ori[k]) % om),\n                );\n              }\n            }\n          }\n        }\n        for (let j = 0; !keepori && j < n; j++) {\n          for (let o = 1; o < om; o++) {\n            if (duo.find(j * om) === duo.find(j * om + o)) {\n              keepori = true;\n            }\n          }\n        }\n        for (let j = 0; !keepori && j < n; j++) {\n          for (let k = 0; k < j; k++) {\n            if (\n              this.solved.orbits[i].perm[j] === this.solved.orbits[i].perm[k]\n            ) {\n              keepori = true;\n            }\n          }\n        }\n      }\n      // is there just one result set, or more than one?\n      let nontriv = -1;\n      let multiple = false;\n      for (let j = 0; j < this.orbitdefs[i].size; j++) {\n        if (changed[j]) {\n          const h = du.find(j);\n          if (nontriv < 0) {\n            nontriv = h;\n          } else if (nontriv !== h) {\n            multiple = true;\n          }\n        }\n      }\n      for (let j = 0; j < this.orbitdefs[i].size; j++) {\n        if (!changed[j]) {\n          continue;\n        }\n        const h = du.find(j);\n        if (h !== j) {\n          continue;\n        }\n        const no: number[] = [];\n        const on: number[] = [];\n        let nv = 0;\n        for (let k = 0; k < this.orbitdefs[i].size; k++) {\n          if (du.find(k) === j) {\n            no[nv] = k;\n            on[k] = nv;\n            nv++;\n          }\n        }\n        if (multiple) {\n          neworbitnames.push(`${this.orbitnames[i]}_p${j}`);\n        } else {\n          neworbitnames.push(this.orbitnames[i]);\n        }\n        if (keepori) {\n          neworbitdefs.push(new PGOrbitDef(nv, this.orbitdefs[i].mod));\n          newsolved.push(this.solved.orbits[i].remapVS(no, nv));\n          for (let k = 0; k < this.moveops.length; k++) {\n            newmoveops[k].push(this.moveops[k].orbits[i].remap(no, on, nv));\n          }\n        } else {\n          neworbitdefs.push(new PGOrbitDef(nv, 1));\n          newsolved.push(this.solved.orbits[i].remapVS(no, nv).killOri());\n          for (let k = 0; k < this.moveops.length; k++) {\n            newmoveops[k].push(\n              this.moveops[k].orbits[i].remap(no, on, nv).killOri(),\n            );\n          }\n        }\n      }\n    }\n    return new PGOrbitsDef(\n      neworbitnames,\n      neworbitdefs,\n      new VisibleState(newsolved),\n      this.movenames,\n      newmoveops.map((_) => new PGTransform(_)),\n      this.isRotation,\n      this.forcenames,\n    );\n  }\n\n  // replace the solved state with a new scrambled state.\n  public scramble(n: number): void {\n    this.solved = this.solved.mul(this.getScrambleTransformation(n));\n  }\n\n  // generate a new \"random\" position based on an entropy pool\n  // this should be significantly faster and more random than just\n  // doing a large number of random moves, especially on big puzzles.\n  public getScrambleTransformation(n: number): PGTransform {\n    // don't let n be too tiny\n    if (n < 100) {\n      n = 100;\n    }\n    const pool: PGTransform[] = [];\n    for (let i = 0; i < this.moveops.length; i++) {\n      pool[i] = this.moveops[i];\n    }\n    for (let i = 0; i < pool.length; i++) {\n      const j = Math.floor(Math.random() * pool.length);\n      const t = pool[i];\n      pool[i] = pool[j];\n      pool[j] = t;\n    }\n    if (n < pool.length) {\n      n = pool.length;\n    }\n    for (let i = 0; i < n; i++) {\n      const ri = Math.floor(Math.random() * pool.length);\n      const rj = Math.floor(Math.random() * pool.length);\n      const rm = Math.floor(Math.random() * this.moveops.length);\n      pool[ri] = pool[ri].mul(pool[rj]).mul(this.moveops[rm]);\n      if (Math.random() < 0.1) {\n        // break up parity\n        pool[ri] = pool[ri].mul(this.moveops[rm]);\n      }\n    }\n    let s = pool[0];\n    for (let i = 1; i < pool.length; i++) {\n      s = s.mul(pool[i]);\n    }\n    return s;\n  }\n\n  public reassemblySize(): bigint {\n    let n = BigInt(1);\n    for (let i = 0; i < this.orbitdefs.length; i++) {\n      n *= this.orbitdefs[i].reassemblySize();\n    }\n    return n;\n  }\n}\n\nexport class PGOrbit {\n  private static kcache: Record<string, number[]>[] = [];\n\n  public static e(n: number, mod: number): PGOrbit {\n    return new PGOrbit(iota(n), zeros(n), mod);\n  }\n\n  constructor(\n    public perm: number[],\n    public ori: number[],\n    public orimod: number,\n  ) {}\n\n  public mul(b: PGOrbit): PGOrbit {\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n);\n    if (this.orimod === 1) {\n      for (let i = 0; i < n; i++) {\n        newPerm[i] = this.perm[b.perm[i]];\n      }\n      return new PGOrbit(newPerm, this.ori, this.orimod);\n    } else {\n      const newOri = new Array<number>(n);\n      for (let i = 0; i < n; i++) {\n        newPerm[i] = this.perm[b.perm[i]];\n        newOri[i] = (this.ori[b.perm[i]] + b.ori[i]) % this.orimod;\n      }\n      return new PGOrbit(newPerm, newOri, this.orimod);\n    }\n  }\n\n  public inv(): PGOrbit {\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n);\n    const newOri = new Array<number>(n);\n    for (let i = 0; i < n; i++) {\n      newPerm[this.perm[i]] = i;\n      newOri[this.perm[i]] = (this.orimod - this.ori[i]) % this.orimod;\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public equal(b: PGOrbit): boolean {\n    const n = this.perm.length;\n    for (let i = 0; i < n; i++) {\n      if (this.perm[i] !== b.perm[i] || this.ori[i] !== b.ori[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // in-place mutator\n  public killOri(): this {\n    const n = this.perm.length;\n    for (let i = 0; i < n; i++) {\n      this.ori[i] = 0;\n    }\n    this.orimod = 1;\n    return this;\n  }\n\n  public toPerm(): Perm {\n    const o = this.orimod;\n    if (o === 1) {\n      return new Perm(this.perm);\n    }\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n * o);\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < o; j++) {\n        newPerm[i * o + j] = o * this.perm[i] + ((this.ori[i] + j) % o);\n      }\n    }\n    return new Perm(newPerm);\n  }\n\n  // returns tuple of sets of identical pieces in this orbit\n  public identicalPieces(): number[][] {\n    const done: boolean[] = [];\n    const n = this.perm.length;\n    const r: number[][] = [];\n    for (let i = 0; i < n; i++) {\n      const v = this.perm[i];\n      if (done[v] === undefined) {\n        const s: number[] = [i];\n        done[v] = true;\n        for (let j = i + 1; j < n; j++) {\n          if (this.perm[j] === v) {\n            s.push(j);\n          }\n        }\n        r.push(s);\n      }\n    }\n    return r;\n  }\n\n  public order(): number {\n    // can be made more efficient\n    return this.toPerm().order();\n  }\n\n  public isIdentity(): boolean {\n    const n = this.perm.length;\n    if (this.perm === iota(n) && this.ori === zeros(n)) {\n      return true;\n    }\n    for (let i = 0; i < n; i++) {\n      if (this.perm[i] !== i || this.ori[i] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private zeroOris(): boolean {\n    const n = this.perm.length;\n    if (this.ori === zeros(n)) {\n      return true;\n    }\n    for (let i = 0; i < n; i++) {\n      if (this.ori[i] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public remap(no: number[], on: number[], nv: number): PGOrbit {\n    const newPerm = new Array<number>(nv);\n    const newOri = new Array<number>(nv);\n    for (let i = 0; i < nv; i++) {\n      newPerm[i] = on[this.perm[no[i]]];\n      newOri[i] = this.ori[no[i]];\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public remapVS(no: number[], nv: number): PGOrbit {\n    const newPerm = new Array<number>(nv);\n    const newOri = new Array<number>(nv);\n    let nextNew = 0;\n    const reassign = [];\n    for (let i = 0; i < nv; i++) {\n      const ov = this.perm[no[i]];\n      if (reassign[ov] === undefined) {\n        reassign[ov] = nextNew++;\n      }\n      newPerm[i] = reassign[ov];\n      newOri[i] = this.ori[no[i]];\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public appendDefinition(\n    result: string[],\n    name: string,\n    useVS: boolean,\n    concise: boolean = true,\n  ): void {\n    if (concise && this.isIdentity()) {\n      return;\n    }\n    result.push(name);\n    result.push(this.perm.map((_: number) => _ + 1).join(\" \"));\n    if (!this.zeroOris()) {\n      if (useVS) {\n        const newori = new Array<number>(this.ori.length);\n        for (let i = 0; i < newori.length; i++) {\n          newori[this.perm[i]] = this.ori[i];\n        }\n        result.push(newori.join(\" \"));\n      } else {\n        result.push(this.ori.join(\" \"));\n      }\n    }\n  }\n\n  // TODO: return type\n  public toKPuzzle(): Record<string, number[]> {\n    const n = this.perm.length;\n    if (this.isIdentity()) {\n      if (!PGOrbit.kcache[n]) {\n        PGOrbit.kcache[n] = { permutation: iota(n), orientation: zeros(n) };\n      }\n      return PGOrbit.kcache[n];\n    } else {\n      return { permutation: this.perm, orientation: this.ori };\n    }\n  }\n}\nexport class PGTransformBase {\n  constructor(public orbits: PGOrbit[]) {}\n  public internalMul(b: PGTransformBase): PGOrbit[] {\n    const newOrbits: PGOrbit[] = [];\n    for (let i = 0; i < this.orbits.length; i++) {\n      newOrbits.push(this.orbits[i].mul(b.orbits[i]));\n    }\n    return newOrbits;\n  }\n\n  protected internalInv(): PGOrbit[] {\n    const newOrbits: PGOrbit[] = [];\n    for (const orbit of this.orbits) {\n      newOrbits.push(orbit.inv());\n    }\n    return newOrbits;\n  }\n\n  public equal(b: PGTransformBase): boolean {\n    for (let i = 0; i < this.orbits.length; i++) {\n      if (!this.orbits[i].equal(b.orbits[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  protected killOri(): this {\n    for (const orbit of this.orbits) {\n      orbit.killOri();\n    }\n    return this;\n  }\n\n  public toPerm(): Perm {\n    const perms = new Array<Perm>();\n    let n = 0;\n    for (const orbit of this.orbits) {\n      const p = orbit.toPerm();\n      perms.push(p);\n      n += p.n;\n    }\n    const newPerm = new Array<number>(n);\n    n = 0;\n    for (const p of perms) {\n      for (let j = 0; j < p.n; j++) {\n        newPerm[n + j] = n + p.p[j];\n      }\n      n += p.n;\n    }\n    return new Perm(newPerm);\n  }\n\n  public identicalPieces(): number[][] {\n    const r: number[][] = [];\n    let n = 0;\n    for (const orbit of this.orbits) {\n      const o = orbit.orimod;\n      const s = orbit.identicalPieces();\n      for (let j = 0; j < s.length; j++) {\n        r.push(s[j].map((_) => _ * o + n));\n      }\n      n += o * orbit.perm.length;\n    }\n    return r;\n  }\n\n  public order(): number {\n    let r = 1;\n    for (const orbit of this.orbits) {\n      r = lcm(r, orbit.order());\n    }\n    return r;\n  }\n}\nexport class PGTransform extends PGTransformBase {\n  constructor(orbits: PGOrbit[]) {\n    super(orbits);\n  }\n\n  public mul(b: PGTransform): PGTransform {\n    return new PGTransform(this.internalMul(b));\n  }\n\n  public mulScalar(n: number): PGTransform {\n    if (n === 0) {\n      return this.e();\n    }\n    let t: PGTransform = this;\n    if (n < 0) {\n      t = t.inv();\n      n = -n;\n    }\n    while ((n & 1) === 0) {\n      t = t.mul(t);\n      n >>= 1;\n    }\n    if (n === 1) {\n      return t;\n    }\n    let s = t;\n    let r = this.e();\n    while (n > 0) {\n      if (n & 1) {\n        r = r.mul(s);\n      }\n      if (n > 1) {\n        s = s.mul(s);\n      }\n      n >>= 1;\n    }\n    return r;\n  }\n\n  public inv(): PGTransform {\n    return new PGTransform(this.internalInv());\n  }\n\n  public e(): PGTransform {\n    return new PGTransform(\n      this.orbits.map((_: PGOrbit) => PGOrbit.e(_.perm.length, _.orimod)),\n    );\n  }\n}\nexport class VisibleState extends PGTransformBase {\n  constructor(orbits: PGOrbit[]) {\n    super(orbits);\n  }\n\n  public mul(b: PGTransform): VisibleState {\n    return new VisibleState(this.internalMul(b));\n  }\n}\n//  Disjoint set union implementation.\nclass DisjointUnion {\n  private heads: number[];\n  constructor(public n: number) {\n    this.heads = new Array<number>(n);\n    for (let i = 0; i < n; i++) {\n      this.heads[i] = i;\n    }\n  }\n\n  public find(v: number): number {\n    let h = this.heads[v];\n    if (this.heads[h] === h) {\n      return h;\n    }\n    h = this.find(this.heads[h]);\n    this.heads[v] = h;\n    return h;\n  }\n\n  public union(a: number, b: number): void {\n    const ah = this.find(a);\n    const bh = this.find(b);\n    if (ah < bh) {\n      this.heads[bh] = ah;\n    } else if (ah > bh) {\n      this.heads[ah] = bh;\n    }\n  }\n}\nexport function showcanon(g: PGOrbitsDef, disp: (s: string) => void): void {\n  // show information for canonical move derivation\n  const n = g.moveops.length;\n  if (n > 30) {\n    throw new Error(\"Canon info too big for bitmask\");\n  }\n  const orders = [];\n  const commutes = [];\n  for (let i = 0; i < n; i++) {\n    const permA = g.moveops[i];\n    orders.push(permA.order());\n    let bits = 0;\n    for (let j = 0; j < n; j++) {\n      if (j === i) {\n        continue;\n      }\n      const permB = g.moveops[j];\n      if (permA.mul(permB).equal(permB.mul(permA))) {\n        bits |= 1 << j;\n      }\n    }\n    commutes.push(bits);\n  }\n  let curlev: any = {};\n  curlev[0] = 1;\n  for (let d = 0; d < 100; d++) {\n    let sum = 0;\n    const nextlev: any = {};\n    let uniq = 0;\n    for (const sti in curlev) {\n      const st = +sti; // string to number\n      const cnt = curlev[st];\n      sum += cnt;\n      uniq++;\n      for (let mv = 0; mv < orders.length; mv++) {\n        if (\n          ((st >> mv) & 1) === 0 &&\n          (st & commutes[mv] & ((1 << mv) - 1)) === 0\n        ) {\n          const nst = (st & commutes[mv]) | (1 << mv);\n          if (nextlev[nst] === undefined) {\n            nextlev[nst] = 0;\n          }\n          nextlev[nst] += (orders[mv] - 1) * cnt;\n        }\n      }\n    }\n    disp(`${d}: canonseq ${sum} states ${uniq}`);\n    curlev = nextlev;\n  }\n}\n// This is a less effective canonicalization (that happens to work fine\n// for the 3x3x3).  We include this only for comparison.\nexport function showcanon0(g: PGOrbitsDef, disp: (s: string) => void): void {\n  // show information for canonical move derivation\n  const n = g.moveops.length;\n  if (n > 30) {\n    throw new Error(\"Canon info too big for bitmask\");\n  }\n  const orders = [];\n  const commutes = [];\n  for (let i = 0; i < n; i++) {\n    const permA = g.moveops[i];\n    orders.push(permA.order());\n    let bits = 0;\n    for (let j = 0; j < n; j++) {\n      if (j === i) {\n        continue;\n      }\n      const permB = g.moveops[j];\n      if (permA.mul(permB).equal(permB.mul(permA))) {\n        bits |= 1 << j;\n      }\n    }\n    commutes.push(bits);\n  }\n  let curlev: any = {};\n  disp(\"0: canonseq 1\");\n  for (let x = 0; x < orders.length; x++) {\n    curlev[x] = orders[x] - 1;\n  }\n  for (let d = 1; d < 100; d++) {\n    let sum = 0;\n    const nextlev: any = {};\n    let uniq = 0;\n    for (const sti in curlev) {\n      const st = +sti; // string to number\n      const cnt = curlev[st];\n      sum += cnt;\n      uniq++;\n      for (let mv = 0; mv < orders.length; mv++) {\n        if (mv === st || (commutes[mv] & (1 << st) && mv < st)) {\n          continue;\n        }\n        if (nextlev[mv] === undefined) {\n          nextlev[mv] = 0;\n        }\n        nextlev[mv] += (orders[mv] - 1) * cnt;\n      }\n    }\n    disp(`${d}\": canonseq ${sum} states ${uniq}`);\n    curlev = nextlev;\n  }\n}\n","export type PuzzleDescriptionString = string;\n\nexport const PGPuzzles: { [name: string]: PuzzleDescriptionString } = {\n  \"2x2x2\": \"c f 0\",\n  \"3x3x3\": \"c f 0.333333333333333\",\n  \"4x4x4\": \"c f 0.5 f 0\",\n  \"5x5x5\": \"c f 0.6 f 0.2\",\n  \"6x6x6\": \"c f 0.666666666666667 f 0.333333333333333 f 0\",\n  \"7x7x7\": \"c f 0.714285714285714 f 0.428571428571429 f 0.142857142857143\",\n  \"8x8x8\": \"c f 0.75 f 0.5 f 0.25 f 0\",\n  \"9x9x9\":\n    \"c f 0.777777777777778 f 0.555555555555556 f 0.333333333333333 f 0.111111111111111\",\n  \"10x10x10\": \"c f 0.8 f 0.6 f 0.4 f 0.2 f 0\",\n  \"11x11x11\":\n    \"c f 0.818181818181818 f 0.636363636363636 f 0.454545454545455 f 0.272727272727273 f 0.0909090909090909\",\n  \"12x12x12\":\n    \"c f 0.833333333333333 f 0.666666666666667 f 0.5 f 0.333333333333333 f 0.166666666666667 f 0\",\n  \"13x13x13\":\n    \"c f 0.846153846153846 f 0.692307692307692 f 0.538461538461538 f 0.384615384615385 f 0.230769230769231 f 0.0769230769230769\",\n  \"20x20x20\": \"c f 0 f .1 f .2 f .3 f .4 f .5 f .6 f .7 f .8 f .9\",\n  \"30x30x30\":\n    \"c f 0 f .066667 f .133333 f .2 f .266667 f .333333 f .4 f .466667 f .533333 f .6 f .666667 f .733333 f .8 f .866667 f .933333\",\n  \"40x40x40\":\n    \"c f 0 f .05 f .1 f .15 f .2 f .25 f .3 f .35 f .4 f .45 f .5 f .55 f .6 f .65 f .7 f .75 f .8 f .85 f .9 f .95\",\n  skewb: \"c v 0\",\n  \"master skewb\": \"c v 0.275\",\n  \"professor skewb\": \"c v 0 v 0.38\",\n  \"compy cube\": \"c v 0.915641442663986\",\n  helicopter: \"c e 0.707106781186547\",\n  \"curvy copter\": \"c e 0.83\",\n  dino: \"c v 0.577350269189626\",\n  \"little chop\": \"c e 0\",\n  pyramorphix: \"t e 0\",\n  mastermorphix: \"t e 0.346184634065199\",\n  pyraminx: \"t v 0.333333333333333 v 1.66666666666667\",\n  tetraminx: \"t v 0.333333333333333\",\n  \"master pyraminx\": \"t v 0 v 1 v 2\",\n  \"master tetraminx\": \"t v 0 v 1\",\n  \"professor pyraminx\": \"t v -0.2 v 0.6 v 1.4 v 2.2\",\n  \"professor tetraminx\": \"t v -0.2 v 0.6 v 1.4\",\n  \"Jing pyraminx\": \"t f 0\",\n  \"master pyramorphix\": \"t e 0.866025403784437\",\n  megaminx: \"d f 0.7\",\n  gigaminx: \"d f 0.64 f 0.82\",\n  teraminx: \"d f 0.64 f 0.76 f 0.88\",\n  petaminx: \"d f 0.64 f 0.73 f 0.82 f 0.91\",\n  examinx: \"d f 0.64 f 0.712 f 0.784 f 0.856 f 0.928\",\n  zetaminx: \"d f 0.64 f 0.7 f 0.76 f 0.82 f 0.88 f 0.94\",\n  yottaminx: \"d f 0.64 f 0.6914 f 0.7429 f 0.7943 f 0.8457 f 0.8971 f 0.9486\",\n  pentultimate: \"d f 0\",\n  \"master pentultimate\": \"d f 0.1\",\n  \"elite pentultimate\": \"d f 0 f 0.145905\",\n  // exact value for starminx is sqrt(5(5-2 sqrt(5))/3)\n  starminx: \"d v 0.937962370425399\",\n  \"starminx 2\": \"d f 0.23606797749979\",\n  \"pyraminx crystal\": \"d f 0.447213595499989\",\n  chopasaurus: \"d v 0\",\n  \"big chop\": \"d e 0\",\n  \"skewb diamond\": \"o f 0\",\n  FTO: \"o f 0.333333333333333\",\n  \"master FTO\": \"o f 0.5 f 0\",\n  \"Christopher's jewel\": \"o v 0.577350269189626\",\n  octastar: \"o e 0\",\n  \"Trajber's octahedron\": \"o v 0.433012701892219\",\n  \"radio chop\": \"i f 0\",\n  icosamate: \"i v 0\",\n  \"icosahedron 2\": \"i v 0.18759247376021\",\n  \"icosahedron 3\": \"i v 0.18759247376021 e 0\",\n  \"icosahedron static faces\": \"i v 0.84\",\n  \"icosahedron moving faces\": \"i v 0.73\",\n  \"Eitan's star\": \"i f 0.61803398874989\",\n  \"2x2x2 + dino\": \"c f 0 v 0.577350269189626\",\n  \"2x2x2 + little chop\": \"c f 0 e 0\",\n  \"dino + little chop\": \"c v 0.577350269189626 e 0\",\n  \"2x2x2 + dino + little chop\": \"c f 0 v 0.577350269189626 e 0\",\n  \"megaminx + chopasaurus\": \"d f 0.61803398875 v 0\",\n  \"starminx combo\": \"d f 0.23606797749979 v 0.937962370425399\",\n};\n\nexport type PuzzleName = keyof typeof PGPuzzles;\n","/* tslint:disable no-bitwise */\n/* tslint:disable prefer-for-of */ // TODO\n\n// We need a quaternion class.  We use this to represent rotations,\n// planes, and points.\n\nconst eps = 1e-9; // TODO: Deduplicate with `PuzzleGeometry`?\n\nexport function centermassface(face: Quat[]): Quat {\n  // calculate a center of a face by averaging points\n  let s = new Quat(0, 0, 0, 0);\n  for (let i = 0; i < face.length; i++) {\n    s = s.sum(face[i]);\n  }\n  return s.smul(1.0 / face.length);\n}\n\nexport function solvethreeplanes(\n  p1: number,\n  p2: number,\n  p3: number,\n  planes: Quat[],\n): any {\n  // find intersection of three planes but only if interior\n  // Takes three indices into a plane array, and returns the point at the\n  // intersection of all three, but only if it is internal to all planes.\n  const p = planes[p1].intersect3(planes[p2], planes[p3]);\n  if (!p) {\n    return p;\n  }\n  for (let i = 0; i < planes.length; i++) {\n    if (i !== p1 && i !== p2 && i !== p3) {\n      const dt = planes[i].b * p.b + planes[i].c * p.c + planes[i].d * p.d;\n      if (\n        (planes[i].a > 0 && dt > planes[i].a) ||\n        (planes[i].a < 0 && dt < planes[i].a)\n      ) {\n        return false;\n      }\n    }\n  }\n  return p;\n}\n\nexport class Quat {\n  constructor(\n    public a: number,\n    public b: number,\n    public c: number,\n    public d: number,\n  ) {}\n\n  public mul(q: Quat): Quat {\n    // Quaternion multiplication\n    return new Quat(\n      this.a * q.a - this.b * q.b - this.c * q.c - this.d * q.d,\n      this.a * q.b + this.b * q.a + this.c * q.d - this.d * q.c,\n      this.a * q.c - this.b * q.d + this.c * q.a + this.d * q.b,\n      this.a * q.d + this.b * q.c - this.c * q.b + this.d * q.a,\n    );\n  }\n\n  public toString(): string {\n    return `Q[${this.a},${this.b},${this.c},${this.d}]`;\n  }\n\n  public dist(q: Quat): number {\n    // Euclidean distance\n    return Math.hypot(this.a - q.a, this.b - q.b, this.c - q.c, this.d - q.d);\n  }\n\n  public len(): number {\n    // Euclidean length\n    return Math.hypot(this.a, this.b, this.c, this.d);\n  }\n\n  public cross(q: Quat): Quat {\n    // cross product\n    return new Quat(\n      0,\n      this.c * q.d - this.d * q.c,\n      this.d * q.b - this.b * q.d,\n      this.b * q.c - this.c * q.b,\n    );\n  }\n\n  public dot(q: Quat): number {\n    // dot product of two quaternions\n    return this.b * q.b + this.c * q.c + this.d * q.d;\n  }\n\n  public normalize(): Quat {\n    // make the magnitude be 1\n    const d = Math.sqrt(this.dot(this));\n    return new Quat(this.a / d, this.b / d, this.c / d, this.d / d);\n  }\n\n  public makenormal(): Quat {\n    // make a normal vector from a plane or quat or point\n    return new Quat(0, this.b, this.c, this.d).normalize();\n  }\n\n  public normalizeplane(): Quat {\n    // normalize a plane\n    const d = Math.hypot(this.b, this.c, this.d);\n    return new Quat(this.a / d, this.b / d, this.c / d, this.d / d);\n  }\n\n  public smul(m: number): Quat {\n    // scalar multiplication\n    return new Quat(this.a * m, this.b * m, this.c * m, this.d * m);\n  }\n\n  public sum(q: Quat): Quat {\n    // quaternion sum\n    return new Quat(this.a + q.a, this.b + q.b, this.c + q.c, this.d + q.d);\n  }\n\n  public sub(q: Quat): Quat {\n    // difference\n    return new Quat(this.a - q.a, this.b - q.b, this.c - q.c, this.d - q.d);\n  }\n\n  public angle(): number {\n    // quaternion angle\n    return 2 * Math.acos(this.a);\n  }\n\n  public invrot(): Quat {\n    // quaternion inverse rotation\n    return new Quat(this.a, -this.b, -this.c, -this.d);\n  }\n\n  public det3x3(\n    a00: number,\n    a01: number,\n    a02: number,\n    a10: number,\n    a11: number,\n    a12: number,\n    a20: number,\n    a21: number,\n    a22: number,\n  ): number {\n    // 3x3 determinant\n    return (\n      a00 * (a11 * a22 - a12 * a21) +\n      a01 * (a12 * a20 - a10 * a22) +\n      a02 * (a10 * a21 - a11 * a20)\n    );\n  }\n\n  public rotateplane(q: Quat): Quat {\n    // rotate a plane using a quaternion\n    const t = q.mul(new Quat(0, this.b, this.c, this.d)).mul(q.invrot());\n    t.a = this.a;\n    return t;\n  }\n\n  // return any vector orthogonal to the given one.  Find the smallest\n  // component (in absolute value) and return the cross product of that\n  // axis with the given vector.\n  public orthogonal(): Quat {\n    const ab = Math.abs(this.b);\n    const ac = Math.abs(this.c);\n    const ad = Math.abs(this.d);\n    if (ab < ac && ab < ad) {\n      return this.cross(new Quat(0, 1, 0, 0)).normalize();\n    } else if (ac < ab && ac < ad) {\n      return this.cross(new Quat(0, 0, 1, 0)).normalize();\n    } else {\n      return this.cross(new Quat(0, 0, 0, 1)).normalize();\n    }\n  }\n\n  // return the Quaternion that will rotate the this vector\n  // to the b vector through rotatepoint.\n  public pointrotation(b: Quat): Quat {\n    const a = this.normalize();\n    b = b.normalize();\n    if (a.sub(b).len() < eps) {\n      return new Quat(1, 0, 0, 0);\n    }\n    let h = a.sum(b);\n    if (h.len() < eps) {\n      h = h.orthogonal();\n    } else {\n      h = h.normalize();\n    }\n    const r = a.cross(h);\n    r.a = a.dot(h);\n    return r;\n  }\n\n  // given two vectors, return the portion of the first that\n  // is not in the direction of the second.\n  public unproject(b: Quat): Quat {\n    return this.sum(b.smul(-this.dot(b) / (this.len() * b.len())));\n  }\n\n  public rotatepoint(q: Quat): Quat {\n    // rotate a point\n    return q.mul(this).mul(q.invrot());\n  }\n\n  public rotateface(face: Quat[]): Quat[] {\n    // rotate a face by this Q.\n    return face.map((_: Quat) => _.rotatepoint(this));\n  }\n\n  public intersect3(p2: Quat, p3: Quat): Quat | false {\n    // intersect three planes if there is one\n    const det = this.det3x3(\n      this.b,\n      this.c,\n      this.d,\n      p2.b,\n      p2.c,\n      p2.d,\n      p3.b,\n      p3.c,\n      p3.d,\n    );\n    if (Math.abs(det) < eps) {\n      return false; // TODO: Change to `null` or `undefined`?\n    }\n    return new Quat(\n      0,\n      this.det3x3(this.a, this.c, this.d, p2.a, p2.c, p2.d, p3.a, p3.c, p3.d) /\n        det,\n      this.det3x3(this.b, this.a, this.d, p2.b, p2.a, p2.d, p3.b, p3.a, p3.d) /\n        det,\n      this.det3x3(this.b, this.c, this.a, p2.b, p2.c, p2.a, p3.b, p3.c, p3.a) /\n        det,\n    );\n  }\n\n  public side(x: number): number {\n    // is this point close to the origin, or on one or the other side?\n    if (x > eps) {\n      return 1;\n    }\n    if (x < -eps) {\n      return -1;\n    }\n    return 0;\n  }\n\n  /**\n   * Cuts a face by this plane, or returns null if there\n   * is no intersection.\n   * @param face The face to cut.\n   */\n  public cutface(face: Quat[]): Quat[][] | null {\n    const d = this.a;\n    let seen = 0;\n    let r = null;\n    for (let i = 0; i < face.length; i++) {\n      seen |= 1 << (this.side(face[i].dot(this) - d) + 1);\n    }\n    if ((seen & 5) === 5) {\n      r = [];\n      // saw both sides\n      const inout = face.map((_: Quat) => this.side(_.dot(this) - d));\n      for (let s = -1; s <= 1; s += 2) {\n        const nface = [];\n        for (let k = 0; k < face.length; k++) {\n          if (inout[k] === s || inout[k] === 0) {\n            nface.push(face[k]);\n          }\n          const kk = (k + 1) % face.length;\n          if (inout[k] + inout[kk] === 0 && inout[k] !== 0) {\n            const vk = face[k].dot(this) - d;\n            const vkk = face[kk].dot(this) - d;\n            const r = vk / (vk - vkk);\n            const pt = face[k].smul(1 - r).sum(face[kk].smul(r));\n            nface.push(pt);\n          }\n        }\n        r.push(nface);\n      }\n    }\n    return r;\n  }\n\n  public cutfaces(faces: Quat[][]): Quat[][] {\n    // Cut a set of faces by a plane and return new set\n    const nfaces = [];\n    for (let j = 0; j < faces.length; j++) {\n      const face = faces[j];\n      const t = this.cutface(face);\n      if (t) {\n        nfaces.push(t[0]);\n        nfaces.push(t[1]);\n      } else {\n        nfaces.push(face);\n      }\n    }\n    return nfaces;\n  }\n\n  public faceside(face: Quat[]): number {\n    // which side of a plane is a face on?\n    const d = this.a;\n    for (let i = 0; i < face.length; i++) {\n      const s = this.side(face[i].dot(this) - d);\n      if (s !== 0) {\n        return s;\n      }\n    }\n    throw new Error(\"Could not determine side of plane in faceside\");\n  }\n\n  public sameplane(p: Quat): boolean {\n    // are two planes the same?\n    const a = this.normalize();\n    const b = p.normalize();\n    return a.dist(b) < eps || a.dist(b.smul(-1)) < eps;\n  }\n\n  public makecut(r: number): Quat {\n    // make a cut from a normal vector\n    return new Quat(r, this.b, this.c, this.d);\n  }\n}\n","/* tslint:disable prefer-for-of */ // TODO\n\nimport { Quat, solvethreeplanes } from \"./Quat\";\n\n// Next we define a class that yields quaternion generators for each of\n// the five platonic solids.  The quaternion generators chosen are\n// chosen specifically so that the first quaternion doubles as a plane\n// description that yields the given Platonic solid (so for instance, the\n// cubical group and octahedral group are identical in math, but we\n// give distinct representations choosing the first quaternion so that\n// we get the desired figure.)  Our convention is one vertex of the\n// shape points precisely down.\n\n// This class is static.\n\nconst eps = 1e-9; // TODO: Deduplicate with `PuzzleGeometry`?\n\nexport function cube(): Quat[] {\n  const s5 = Math.sqrt(0.5);\n  return [new Quat(s5, s5, 0, 0), new Quat(s5, 0, s5, 0)];\n}\n\nexport function tetrahedron(): Quat[] {\n  return [new Quat(0.5, 0.5, 0.5, 0.5), new Quat(0.5, 0.5, 0.5, -0.5)];\n}\n\nexport function dodecahedron(): Quat[] {\n  const d36 = (2 * Math.PI) / 10;\n  let dx = 0.5 + 0.3 * Math.sqrt(5);\n  let dy = 0.5 + 0.1 * Math.sqrt(5);\n  const dd = Math.sqrt(dx * dx + dy * dy);\n  dx /= dd;\n  dy /= dd;\n  return [\n    new Quat(Math.cos(d36), dx * Math.sin(d36), dy * Math.sin(d36), 0),\n    new Quat(0.5, 0.5, 0.5, 0.5),\n  ];\n}\n\nexport function icosahedron(): Quat[] {\n  let dx = 1 / 6 + Math.sqrt(5) / 6;\n  let dy = 2 / 3 + Math.sqrt(5) / 3;\n  const dd = Math.sqrt(dx * dx + dy * dy);\n  dx /= dd;\n  dy /= dd;\n  const ang = (2 * Math.PI) / 6;\n  return [\n    new Quat(Math.cos(ang), dx * Math.sin(ang), dy * Math.sin(ang), 0),\n    new Quat(Math.cos(ang), -dx * Math.sin(ang), dy * Math.sin(ang), 0),\n  ];\n}\n\nexport function octahedron(): Quat[] {\n  const s5 = Math.sqrt(0.5);\n  return [new Quat(0.5, 0.5, 0.5, 0.5), new Quat(s5, 0, 0, s5)];\n}\n\nexport function closure(g: Quat[]): Quat[] {\n  // compute the closure of a set of generators\n  // This is quadratic in the result size.  Also, it has no protection\n  // against you providing a bogus set of generators that would generate\n  // an infinite group.\n  const q = [new Quat(1, 0, 0, 0)];\n  for (let i = 0; i < q.length; i++) {\n    for (let j = 0; j < g.length; j++) {\n      const ns = g[j].mul(q[i]);\n      const negns = ns.smul(-1);\n      let wasseen = false;\n      for (let k = 0; k < q.length; k++) {\n        if (ns.dist(q[k]) < eps || negns.dist(q[k]) < eps) {\n          wasseen = true;\n          break;\n        }\n      }\n      if (!wasseen) {\n        q.push(ns);\n      }\n    }\n  }\n  return q;\n}\n\nexport function uniqueplanes(p: Quat, g: Quat[]): Quat[] {\n  // compute unique plane rotations\n  // given a rotation group and a plane, find the rotations that\n  // generate unique planes.  This is quadratic in the return size.\n  const planes = [];\n  const planerot = [];\n  for (let i = 0; i < g.length; i++) {\n    const p2 = p.rotateplane(g[i]);\n    let wasseen = false;\n    for (let j = 0; j < planes.length; j++) {\n      if (p2.dist(planes[j]) < eps) {\n        wasseen = true;\n        break;\n      }\n    }\n    if (!wasseen) {\n      planes.push(p2);\n      planerot.push(g[i]);\n    }\n  }\n  return planerot;\n}\n\nexport function getface(planes: Quat[]): Quat[] {\n  // compute a face given a set of planes\n  // The face returned will be a set of points that lie in the first plane\n  // in the given array, that are on the surface of the polytope defined\n  // by all the planes, and will be returned in clockwise order.\n  // This is O(planes^2 * return size + return_size^2).\n  const face: Quat[] = [];\n  for (let i = 1; i < planes.length; i++) {\n    for (let j = i + 1; j < planes.length; j++) {\n      const p = solvethreeplanes(0, i, j, planes);\n      if (p) {\n        let wasseen = false;\n        for (let k = 0; k < face.length; k++) {\n          if (p.dist(face[k]) < eps) {\n            wasseen = true;\n            break;\n          }\n        }\n        if (!wasseen) {\n          face.push(p);\n        }\n      }\n    }\n  }\n  for (;;) {\n    let changed = false;\n    for (let i = 0; i < face.length; i++) {\n      const j: number = (i + 1) % face.length;\n      if (planes[0].dot(face[i].cross(face[j])) < 0) {\n        const t: Quat = face[i];\n        face[i] = face[j];\n        face[j] = t;\n        changed = true;\n      }\n    }\n    if (!changed) {\n      break;\n    }\n  }\n  return face;\n}\n","import { identity, Perm } from \"./Perm\";\n\nclass FactoredNumber {\n  public mult: number[];\n  constructor() {\n    this.mult = [];\n  }\n\n  public multiply(n: number): void {\n    for (let f = 2; f * f <= n; f++) {\n      while (n % f === 0) {\n        if (undefined !== this.mult[f]) {\n          this.mult[f]++;\n        } else {\n          this.mult[f] = 1;\n        }\n        n /= f;\n      }\n    }\n    if (n > 1) {\n      if (undefined !== this.mult[n]) {\n        this.mult[n]++;\n      } else {\n        this.mult[n] = 1;\n      }\n    }\n  }\n\n  public toString(): string {\n    let r = \"\";\n    for (let i = 0; i < this.mult.length; i++) {\n      if (undefined !== this.mult[i]) {\n        if (r !== \"\") {\n          r += \"*\";\n        }\n        r += i;\n        if (this.mult[i] > 1) {\n          r += `^${this.mult[i]}`;\n        }\n      }\n    }\n    return r;\n  }\n}\n\nexport function schreierSims(g: Perm[], disp: (s: string) => void): bigint {\n  const n = g[0].p.length;\n  const e = identity(n);\n  let sgs: Perm[][] = [];\n  let sgsi: Perm[][] = [];\n  let sgslen: number[][] = [];\n  let Tk: Perm[][] = [];\n  let Tklen: number[][] = [];\n  function resolve(p: Perm): boolean {\n    for (let i = p.p.length - 1; i >= 0; i--) {\n      const j = p.p[i];\n      if (j !== i) {\n        if (!sgs[i][j]) {\n          return false;\n        }\n        p = p.mul(sgsi[i][j]);\n      }\n    }\n    return true;\n  }\n  function knutha(k: number, p: Perm, len: number): void {\n    Tk[k].push(p);\n    Tklen[k].push(len);\n    for (let i = 0; i < sgs[k].length; i++) {\n      if (sgs[k][i]) {\n        knuthb(k, sgs[k][i].mul(p), len + sgslen[k][i]);\n      }\n    }\n  }\n  function knuthb(k: number, p: Perm, len: number): void {\n    const j = p.p[k];\n    if (!sgs[k][j]) {\n      sgs[k][j] = p;\n      sgsi[k][j] = p.inv();\n      sgslen[k][j] = len;\n      for (let i = 0; i < Tk[k].length; i++) {\n        knuthb(k, p.mul(Tk[k][i]), len + Tklen[k][i]);\n      }\n      return;\n    }\n    const p2 = p.mul(sgsi[k][j]);\n    if (!resolve(p2)) {\n      knutha(k - 1, p2, len + sgslen[k][j]);\n    }\n  }\n  function getsgs(): bigint {\n    sgs = [];\n    sgsi = [];\n    Tk = [];\n    sgslen = [];\n    Tklen = [];\n    for (let i = 0; i < n; i++) {\n      sgs.push([]);\n      sgsi.push([]);\n      sgslen.push([]);\n      Tk.push([]);\n      Tklen.push([]);\n      sgs[i][i] = e;\n      sgsi[i][i] = e;\n      sgslen[i][i] = 0;\n    }\n    let none = 0;\n    let sz = BigInt(1);\n    for (let i = 0; i < g.length; i++) {\n      knutha(n - 1, g[i], 1);\n      sz = BigInt(1);\n      let tks = 0;\n      let sollen = 0;\n      const avgs = [];\n      const mults = new FactoredNumber();\n      for (let j = 0; j < n; j++) {\n        let cnt = 0;\n        let lensum = 0;\n        for (let k = 0; k < n; k++) {\n          if (sgs[j][k]) {\n            cnt++;\n            lensum += sgslen[j][k];\n            if (j !== k) {\n              none++;\n            }\n          }\n        }\n        tks += Tk[j].length;\n        sz *= BigInt(cnt);\n        if (cnt > 1) {\n          mults.multiply(cnt);\n        }\n        const avg = lensum / cnt;\n        avgs.push(avg);\n        sollen += avg;\n      }\n      disp(\n        `${i}: sz ${sz} T ${tks} sol ${sollen} none ${none} mults ${mults.toString()}`,\n      );\n    }\n    return sz;\n  }\n  return getsgs();\n}\n","import { Move, QuantumMove } from \"../alg\";\nimport type { KPuzzleDefinition, KTransformationData } from \"../kpuzzle\";\nimport { FaceNameSwizzler } from \"./FaceNameSwizzler\";\nimport {\n  FaceRenamingMapper,\n  FTONotationMapper,\n  MegaminxScramblingNotationMapper,\n  NotationMapper,\n  NullMapper,\n  NxNxNCubeMapper,\n  PyraminxNotationMapper,\n  SkewbNotationMapper,\n  TetraminxNotationMapper,\n} from \"./notation-mapping\";\nimport {\n  BaseFaceCount,\n  FaceBasedOrientationDescription,\n  FaceBasedOrientationDescriptionLookup,\n  PuzzleGeometryFullOptions,\n  PuzzleGeometryOptions,\n} from \"./Options\";\nimport { iota, Perm, zeros } from \"./Perm\";\nimport {\n  externalName,\n  PGOrbit,\n  PGOrbitDef,\n  PGOrbitsDef,\n  PGTransform,\n  showcanon,\n  VisibleState,\n} from \"./PermOriSet\";\nimport { PGPuzzles, PuzzleDescriptionString, PuzzleName } from \"./PGPuzzles\";\nimport {\n  closure,\n  cube,\n  dodecahedron,\n  getface,\n  icosahedron,\n  octahedron,\n  tetrahedron,\n  uniqueplanes,\n} from \"./PlatonicGenerator\";\nimport { centermassface, Quat } from \"./Quat\";\nimport { schreierSims } from \"./SchreierSims\";\n\nexport interface TextureMapper {\n  getuv(fn: number, threed: number[]): number[];\n}\n\nexport interface StickerDatSticker {\n  coords: number[];\n  color: string;\n  orbit: string;\n  ord: number;\n  ori: number;\n  face: number;\n  isDup?: boolean;\n}\n\nexport interface StickerDatFace {\n  coords: number[];\n  name: string;\n}\n\nexport type StickerDatAxis = {\n  coordinates: number[];\n  quantumMove: Move;\n  order: number;\n};\n\nexport interface StickerDat {\n  stickers: StickerDatSticker[];\n  faces: StickerDatFace[];\n  axis: StickerDatAxis[];\n  unswizzle(mv: Move): Move | null;\n  notationMapper: NotationMapper;\n  textureMapper: TextureMapper;\n}\n\n// you can fill these in to help with timing if you want\nfunction tstart(s: string): string {\n  return s;\n}\n\nfunction tend(_: string): void {}\n\nclass Face {\n  private coords: number[];\n  public length: number;\n  constructor(q: Quat[]) {\n    this.coords = new Array(q.length * 3);\n    for (let i = 0; i < q.length; i++) {\n      this.coords[3 * i] = q[i].b;\n      this.coords[3 * i + 1] = q[i].c;\n      this.coords[3 * i + 2] = q[i].d;\n    }\n    this.length = q.length;\n  }\n\n  get(off: number): Quat {\n    return new Quat(\n      0,\n      this.coords[3 * off],\n      this.coords[3 * off + 1],\n      this.coords[3 * off + 2],\n    );\n  }\n\n  centermass(): Quat {\n    let sx = 0;\n    let sy = 0;\n    let sz = 0;\n    for (let i = 0; i < this.length; i++) {\n      sx += this.coords[3 * i];\n      sy += this.coords[3 * i + 1];\n      sz += this.coords[3 * i + 2];\n    }\n    return new Quat(0, sx / this.length, sy / this.length, sz / this.length);\n  }\n\n  rotate(q: Quat): Face {\n    const a = [];\n    for (let i = 0; i < this.length; i++) {\n      a.push(this.get(i).rotatepoint(q));\n    }\n    return new Face(a);\n  }\n\n  rotateforward(): Face {\n    const a = [];\n    for (let i = 1; i < this.length; i++) {\n      a.push(this.get(i));\n    }\n    a.push(this.get(0));\n    return new Face(a);\n  }\n}\n\nexport class FaceTree {\n  constructor(\n    private face: Quat[],\n    private left?: FaceTree,\n    private right?: FaceTree,\n  ) {}\n\n  public split(q: Quat): FaceTree {\n    const t = q.cutface(this.face);\n    if (t !== null) {\n      if (this.left === undefined) {\n        this.left = new FaceTree(t[0]);\n        this.right = new FaceTree(t[1]);\n      } else {\n        this.left = this.left?.split(q);\n        this.right = this.right?.split(q);\n      }\n    }\n    return this;\n  }\n\n  public collect(arr: Face[], leftfirst: boolean): Face[] {\n    if (this.left === undefined) {\n      arr.push(new Face(this.face));\n    } else if (leftfirst) {\n      this.left?.collect(arr, false);\n      this.right?.collect(arr, true);\n    } else {\n      this.right?.collect(arr, false);\n      this.left?.collect(arr, true);\n    }\n    return arr;\n  }\n}\n\nexport function expandfaces(rots: Quat[], faces: Face[]): Face[] {\n  // given a set of faces, expand by rotation set\n  const nfaces = [];\n  for (const rot of rots) {\n    for (const face of faces) {\n      nfaces.push(face.rotate(rot));\n    }\n  }\n  return nfaces;\n}\n\n//  Now we have a geometry class that does the 3D goemetry to calculate\n//  individual sticker information from a Platonic solid and a set of\n//  cuts.  The cuts must have the same symmetry as the Platonic solid;\n//  we even restrict them further to be either vertex-normal,\n//  edge-normal, or face-parallel cuts.  Right now our constructor takes\n//  a character solid indicator (one of c(ube), o(ctahedron), i(cosahedron),\n//  t(etradron), or d(odecahedron), followed by an array of cuts.\n//  Each cut is a character normal indicator that is either f(ace),\n//  e(dge), or v(ertex), followed by a floating point value that gives\n//  the depth of the cut where 0 is the center and 1 is the outside\n//  border of the shape in that direction.\n\n//  This is a heavyweight class with lots of members and construction\n//  is slow.  Be gentle.\n\n//  Everything except a very few methods should be considered private.\n\nconst eps: number = 1e-9;\nconst copyright = \"PuzzleGeometry 0.1 Copyright 2018 Tomas Rokicki.\";\nconst permissivieMoveParsing = false;\n\n// This is a description of the nets and the external names we give each\n// face.  The names should be a set of prefix-free upper-case alphabetics\n// so\n// we can easily also name and distinguish vertices and edges, but we\n// may change this in the future.  The nets consist of a list of lists.\n// Each list gives the name of a face, and then the names of the\n// faces connected to that face (in the net) in clockwise order.\n// The length of each list should be one more than the number of\n// edges in the regular polygon for that face.  All polygons must\n// have the same number of edges.\n// The first two faces in the first list must describe a horizontal edge\n// that is at the bottom of a regular polygon.  The first two faces in\n// every subsequent list for a given polytope must describe a edge that\n// is directly connected in the net and has already been described (this\n// sets the location and orientation of the polygon for that face.\n// Any edge that is not directly connected in the net should be given\n// the empty string as the other face.  All faces do not need to have\n// a list starting with that face; just enough to describe the full\n// connectivity of the net.\n//\n// TODO: change this back to a const JSON definition.\nfunction defaultnets(): any {\n  return {\n    // four faces: tetrahedron\n    4: [[\"F\", \"D\", \"L\", \"R\"]],\n    // six faces: cube\n    6: [\n      [\"F\", \"D\", \"L\", \"U\", \"R\"],\n      [\"R\", \"F\", \"\", \"B\", \"\"],\n    ],\n    // eight faces: octahedron\n    8: [\n      [\"F\", \"D\", \"L\", \"R\"],\n      [\"D\", \"F\", \"BR\", \"\"],\n      [\"BR\", \"D\", \"\", \"BB\"],\n      [\"BB\", \"BR\", \"U\", \"BL\"],\n    ],\n    // twelve faces:  dodecahedron; U/F/R/F/BL/BR from megaminx\n    12: [\n      [\"U\", \"F\", \"\", \"\", \"\", \"\"],\n      [\"F\", \"U\", \"R\", \"C\", \"A\", \"L\"],\n      [\"R\", \"F\", \"\", \"\", \"E\", \"\"],\n      [\"E\", \"R\", \"\", \"BF\", \"\", \"\"],\n      [\"BF\", \"E\", \"BR\", \"BL\", \"I\", \"D\"],\n    ],\n    // twenty faces: icosahedron\n    20: [\n      [\"R\", \"C\", \"F\", \"E\"],\n      [\"F\", \"R\", \"L\", \"U\"],\n      [\"L\", \"F\", \"A\", \"\"],\n      [\"E\", \"R\", \"G\", \"I\"],\n      [\"I\", \"E\", \"S\", \"H\"],\n      [\"S\", \"I\", \"J\", \"B\"],\n      [\"B\", \"S\", \"K\", \"D\"],\n      [\"K\", \"B\", \"M\", \"O\"],\n      [\"O\", \"K\", \"P\", \"N\"],\n      [\"P\", \"O\", \"Q\", \"\"],\n    ],\n  };\n}\n\n// TODO: change this back to a const JSON definition.\nfunction defaultcolors(): any {\n  return {\n    // the colors should use the same naming convention as the nets, above.\n    4: { F: \"#00ff00\", D: \"#ffff00\", L: \"#ff0000\", R: \"#0000ff\" },\n    6: {\n      U: \"#ffffff\",\n      F: \"#00ff00\",\n      R: \"#ff0000\",\n      D: \"#ffff00\",\n      B: \"#0000ff\",\n      L: \"#ff8000\",\n    },\n    8: {\n      U: \"#ffffff\",\n      F: \"#ff0000\",\n      R: \"#00bb00\",\n      D: \"#ffff00\",\n      BB: \"#1122ff\",\n      L: \"#9524c5\",\n      BL: \"#ff8800\",\n      BR: \"#aaaaaa\",\n    },\n    12: {\n      U: \"#ffffff\",\n      F: \"#006633\",\n      R: \"#ff0000\",\n      C: \"#ffffd0\",\n      A: \"#3399ff\",\n      L: \"#660099\",\n      E: \"#ff66cc\",\n      BF: \"#99ff00\",\n      BR: \"#0000ff\",\n      BL: \"#ffff00\",\n      I: \"#ff6633\",\n      D: \"#999999\",\n    },\n    20: {\n      R: \"#db69f0\",\n      C: \"#178fde\",\n      F: \"#23238b\",\n      E: \"#9cc726\",\n      L: \"#2c212d\",\n      U: \"#177fa7\",\n      A: \"#e0de7f\",\n      G: \"#2b57c0\",\n      I: \"#41126b\",\n      S: \"#4b8c28\",\n      H: \"#7c098d\",\n      J: \"#7fe7b4\",\n      B: \"#85fb74\",\n      K: \"#3f4bc3\",\n      D: \"#0ff555\",\n      M: \"#f1c2c8\",\n      O: \"#58d340\",\n      P: \"#c514f2\",\n      N: \"#14494e\",\n      Q: \"#8b1be1\",\n    },\n  };\n}\n\n// Orientation conventions are specified here.  For each of the five platonic\n// solids, by face count, we have three lists of \"cubie names\" consisting of\n// a concatenation of face names.  For vertex (corner) and edge cubies, the\n// first face in the concatenated name is the one that will be marked.\n// For center orientations, the first face specifies which center we are\n// referring to, and the second face specifies the direction of the mark for\n// that face.\n\nconst orientationDefaults = {\n  4: {\n    v: [\"DFR\", \"DLF\", \"DRL\", \"FLR\"],\n    e: [\"FR\", \"LF\", \"DF\", \"DL\", \"RD\", \"RL\"],\n    c: [\"DF\", \"FD\", \"RL\", \"LR\"],\n  },\n  6: {\n    v: [\"URF\", \"UBR\", \"ULB\", \"UFL\", \"DFR\", \"DRB\", \"DBL\", \"DLF\"],\n    e: [\"UF\", \"UR\", \"UB\", \"UL\", \"DF\", \"DR\", \"DB\", \"DL\", \"FR\", \"FL\", \"BR\", \"BL\"],\n    c: [\"UB\", \"LU\", \"FU\", \"RU\", \"BU\", \"DF\"],\n  },\n  8: {\n    v: [\"UBBBRR\", \"URFL\", \"ULBLBB\", \"DBRBBBL\", \"DBLLF\", \"DFRBR\"],\n    e: [\n      \"UL\",\n      \"UBB\",\n      \"UR\",\n      \"BRD\",\n      \"BLD\",\n      \"FD\",\n      \"BRR\",\n      \"FR\",\n      \"FL\",\n      \"BLL\",\n      \"BLBB\",\n      \"BRBB\",\n    ],\n    c: [\"BBU\", \"LU\", \"RU\", \"BRD\", \"FD\", \"BLD\", \"DF\", \"UBB\"],\n  },\n  12: {\n    v: [\n      \"URF\",\n      \"UFL\",\n      \"ULBL\",\n      \"UBLBR\",\n      \"UBRR\",\n      \"DEBF\",\n      \"DBFI\",\n      \"DIA\",\n      \"DAC\",\n      \"DCE\",\n      \"LAI\",\n      \"ALF\",\n      \"FCA\",\n      \"CFR\",\n      \"REC\",\n      \"ERBR\",\n      \"BRBFE\",\n      \"BFBRBL\",\n      \"BLIBF\",\n      \"IBLL\",\n    ],\n    e: [\n      \"UF\",\n      \"UR\",\n      \"UBR\",\n      \"UBL\",\n      \"UL\",\n      \"ER\",\n      \"EBR\",\n      \"EBF\",\n      \"ED\",\n      \"EC\",\n      \"IBF\",\n      \"IBL\",\n      \"IL\",\n      \"IA\",\n      \"ID\",\n      \"AC\",\n      \"CF\",\n      \"FA\",\n      \"BFBR\",\n      \"BRBL\",\n      \"BLBF\",\n      \"CD\",\n      \"AD\",\n      \"AL\",\n      \"FL\",\n      \"FR\",\n      \"CR\",\n      \"BFD\",\n      \"BRR\",\n      \"BLL\",\n    ],\n    c: [\n      \"UF\",\n      \"FU\",\n      \"DBF\",\n      \"BFD\",\n      \"AD\",\n      \"CD\",\n      \"BRU\",\n      \"BLU\",\n      \"LA\",\n      \"RA\",\n      \"EBR\",\n      \"IBL\",\n    ],\n  },\n  20: {\n    v: [\n      \"FLPQU\",\n      \"FUGER\",\n      \"FRCAL\",\n      \"HCREI\",\n      \"ISBDH\",\n      \"JSIEG\",\n      \"BSJMK\",\n      \"MQPOK\",\n      \"ONDBK\",\n      \"NOPLA\",\n      \"UQMJG\",\n      \"DNACH\",\n    ],\n    e: [\n      \"FU\",\n      \"FL\",\n      \"FR\",\n      \"EG\",\n      \"ER\",\n      \"EI\",\n      \"SJ\",\n      \"SI\",\n      \"SB\",\n      \"KM\",\n      \"KB\",\n      \"KO\",\n      \"PQ\",\n      \"PO\",\n      \"PL\",\n      \"UG\",\n      \"JG\",\n      \"MQ\",\n      \"UQ\",\n      \"HC\",\n      \"HD\",\n      \"ND\",\n      \"NA\",\n      \"JM\",\n      \"CA\",\n      \"AL\",\n      \"CR\",\n      \"HI\",\n      \"DB\",\n      \"NO\",\n    ],\n    c: [\n      \"FU\",\n      \"UF\",\n      \"GE\",\n      \"EG\",\n      \"JS\",\n      \"SJ\",\n      \"MK\",\n      \"KM\",\n      \"QP\",\n      \"PQ\",\n      \"LA\",\n      \"AL\",\n      \"RC\",\n      \"CR\",\n      \"IH\",\n      \"HI\",\n      \"BD\",\n      \"DB\",\n      \"ON\",\n      \"NO\",\n    ],\n  },\n};\n\n/*\n *  Default orientations for the puzzles in 3D space.  Can be overridden\n *  by puzzleOrientation or puzzleOrientations options.\n *\n *  These are defined to have a strong intuitive vertical (y) direction\n *  since 3D orbital controls need this.  In comments, we list the\n *  preferred initial camera orientation for each puzzle for twizzle;\n *  this information is explicitly given in the twizzle app file.\n */\n// TODO: change this back to a const JSON definition.\nfunction defaultOrientations(): FaceBasedOrientationDescriptionLookup {\n  return {\n    4: [\n      [\"FLR\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // FLR towards viewer\n    6: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // URF towards viewer\n    8: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // FLUR towards viewer\n    12: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // F towards viewer\n    20: [\n      [\"GUQMJ\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // F towards viewer\n  };\n}\n\nfunction findelement(a: Quat[][], p: Quat): number {\n  // find something in facenames, vertexnames, edgenames\n  for (let i = 0; i < a.length; i++) {\n    if (a[i][0].dist(p) < eps) {\n      return i;\n    }\n  }\n  throw new Error(\"Element not found\");\n}\n\nexport function getPG3DNamedPuzzles(): {\n  [s: string]: PuzzleDescriptionString;\n} {\n  // get some simple definitions of basic puzzles\n  return PGPuzzles;\n}\n\nexport function getPuzzleDescriptionString(\n  puzzleName: PuzzleName,\n): PuzzleDescriptionString {\n  // get some simple definitions of basic puzzles\n  return PGPuzzles[puzzleName];\n}\n\nexport const PUZZLE_BASE_SHAPES = [\"c\", \"t\", \"o\", \"d\", \"i\"] as const;\nexport type PuzzleBaseShape = typeof PUZZLE_BASE_SHAPES[number];\n\nexport const PUZZLE_CUT_TYPES = [\"f\", \"v\", \"e\"] as const;\nexport type PuzzleCutType = typeof PUZZLE_CUT_TYPES[number];\n\nexport type PuzzleCutDescription = { cutType: PuzzleCutType; distance: number };\nexport type PuzzleDescription = {\n  shape: PuzzleBaseShape;\n  cuts: PuzzleCutDescription[];\n};\n\nexport function parsePuzzleDescription(\n  s: PuzzleDescriptionString,\n): PuzzleDescription | null {\n  // parse a text description\n  const a = s.split(/ /).filter(Boolean);\n  if (a.length % 2 === 0) {\n    return null;\n  }\n  const shape = a[0];\n  if (\n    shape !== \"o\" &&\n    shape !== \"c\" &&\n    shape !== \"i\" &&\n    shape !== \"d\" &&\n    shape !== \"t\"\n  ) {\n    return null;\n  }\n  const cuts: PuzzleCutDescription[] = [];\n  for (let i = 1; i < a.length; i += 2) {\n    if (a[i] !== \"f\" && a[i] !== \"v\" && a[i] !== \"e\") {\n      return null;\n    }\n    cuts.push({\n      cutType: a[i] as PuzzleCutType,\n      distance: parseFloat(a[i + 1]),\n    });\n  }\n  return { shape, cuts };\n}\n\nexport function getPuzzleGeometryByDesc(\n  desc: string,\n  options: PuzzleGeometryOptions = {},\n): PuzzleGeometry {\n  const parsed = parsePuzzleDescription(desc);\n  if (parsed === null) {\n    throw new Error(\"Could not parse the puzzle description\");\n  }\n  const pg = new PuzzleGeometry(\n    parsed,\n    Object.assign({}, { allMoves: true } as PuzzleGeometryOptions, options),\n  );\n  pg.allstickers();\n  pg.genperms();\n  return pg;\n}\n\nexport function getPuzzleGeometryByName(\n  puzzleName: PuzzleName,\n  options?: PuzzleGeometryOptions,\n): PuzzleGeometry {\n  return getPuzzleGeometryByDesc(PGPuzzles[puzzleName], options);\n}\n\nfunction getmovename(\n  geo: any,\n  bits: number[],\n  slices: number,\n): [string, boolean] {\n  // generate a move name based on bits, slice, and geo\n  // if the move name is from the opposite face, say so.\n  // find the face that's turned.\n  let inverted = false;\n  if (slices - bits[1] < bits[0]) {\n    // flip if most of the move is on the other side\n    geo = [geo[2], geo[3], geo[0], geo[1]];\n    bits = [slices - bits[1], slices - bits[0]];\n    inverted = true;\n  }\n  let movenameFamily = geo[0] as string;\n  let movenamePrefix = \"\";\n  if (bits[0] === 0 && bits[1] === slices) {\n    movenameFamily = `${movenameFamily}v`;\n  } else if (bits[0] === bits[1]) {\n    if (bits[1] > 0) {\n      movenamePrefix = String(bits[1] + 1);\n    }\n  } else if (bits[0] === 0) {\n    movenameFamily = movenameFamily.toLowerCase();\n    if (bits[1] > 1) {\n      movenamePrefix = String(bits[1] + 1);\n    }\n  } else {\n    throw new Error(\n      `We only support slice and outer block moves right now. ${bits}`,\n    );\n  }\n  return [movenamePrefix + movenameFamily, inverted];\n}\n\n// split a geometrical element into face names.  Do greedy match.\n// Permit underscores between names.\nfunction splitByFaceNames(s: string, facenames: [Quat[], string][]): string[] {\n  const r: string[] = [];\n  let at = 0;\n  while (at < s.length) {\n    if (at > 0 && at < s.length && s[at] === \"_\") {\n      at++;\n    }\n    let currentMatch = \"\";\n    for (const facename of facenames) {\n      if (\n        s.substr(at).startsWith(facename[1]) &&\n        facename[1].length > currentMatch.length\n      ) {\n        currentMatch = facename[1];\n      }\n    }\n    if (currentMatch !== \"\") {\n      r.push(currentMatch);\n      at += currentMatch.length;\n    } else {\n      throw new Error(`Could not split ${s} into face names.`);\n    }\n  }\n  return r;\n}\n\nfunction toCoords(q: Quat, maxdist: number): number[] {\n  return [q.b / maxdist, -q.c / maxdist, q.d / maxdist];\n}\n\nfunction toFaceCoords(q: Face, maxdist: number): number[] {\n  const r = [];\n  const n = q.length;\n  for (let i = 0; i < n; i++) {\n    const pt = toCoords(q.get(n - i - 1), maxdist);\n    r[3 * i] = pt[0];\n    r[3 * i + 1] = pt[1];\n    r[3 * i + 2] = pt[2];\n  }\n  return r;\n}\n\n/** @category PuzzleGeometry */\nexport class PuzzleGeometry {\n  private rotations: Quat[]; // all members of the rotation group\n  public baseplanerot: Quat[]; // unique rotations of the baseplane\n  private baseplanes: Quat[]; // planes, corresponding to faces\n  private facenames: [Quat[], string][]; // face names\n  private faceplanes: [Quat, string][]; // face planes\n  private edgenames: [Quat, string][]; // edge names\n  private vertexnames: [Quat, string][]; // vertexnames\n  private geonormals: [Quat, string, string][]; // all geometric directions, with names and types\n  private moveplanes: Quat[]; // the planes that split moves\n  private moveplanes2: Quat[]; // the planes that split moves, filtered\n  public moveplanesets: Quat[][]; // the move planes, in parallel sets\n  private moveplanenormals: Quat[]; // one move plane\n  public movesetorders: number[]; // the order of rotations for each move set\n  public movesetgeos: [string, string, string, string, number][]; // geometric feature information for move sets\n  private basefaces: Face[]; // polytope faces before cuts\n  private faces: Face[]; // all the stickers\n  private facecentermass: Quat[]; // center of mass of all faces\n  private baseFaceCount: BaseFaceCount; // number of base faces\n  public stickersperface: number; // number of stickers per face\n  public shortedge: number; // number of stickers per face\n  private markedface: number[]; // given a bitmap of faces, identify the marked one\n  public cubies: number[][]; // the cubies\n  private vertexdistance: number; // vertex distance\n  private edgedistance: number; // edge distance\n  private facetocubie: number[]; // map a face to a cubie index\n  private facetoord: number[]; // map a face to a cubie ord\n  private moverotations: Quat[][]; // move rotations\n  private facelisthash: Map<string, number[]>; // face list by key\n  private cubiesetnames: string[]; // cubie set names\n  private cubieords: number[]; // the size of each orbit\n  private cubiesetnums: number[];\n  private cubieordnums: number[];\n  private orbitoris: number[]; // the orientation size of each orbit\n  private cubievaluemap: number[]; // the map for identical cubies\n  private cubiesetcubies: number[][]; // cubies in each cubie set\n  public cmovesbyslice: number[][][] = []; // cmoves as perms by slice\n  public parsedmovelist: [\n    string | undefined,\n    number,\n    number,\n    number,\n    boolean,\n    number,\n  ][]; // parsed move list\n\n  private duplicatedFaces: number[] = []; // which faces are duplicated\n  private duplicatedCubies: number[] = []; // which cubies are duplicated\n  private fixedCubie: number = -1; // fixed cubie, if any\n  private net: string[][] = [];\n  private colors: any = [];\n  private swizzler: FaceNameSwizzler;\n  public notationMapper: NotationMapper = new NullMapper();\n  private addNotationMapper: string = \"\";\n  private setReidOrder: boolean = false;\n\n  private options: PuzzleGeometryFullOptions;\n\n  constructor(\n    public puzzleDescription: PuzzleDescription,\n    options: PuzzleGeometryOptions,\n  ) {\n    const t1 = tstart(\"genperms\");\n    this.options = new PuzzleGeometryFullOptions(options);\n    if (this.options.verbosity > 0) {\n      console.log(this.header(\"# \"));\n    }\n    this.create(puzzleDescription);\n    tend(t1);\n  }\n\n  public create(puzzleDescription: PuzzleDescription): void {\n    const { shape, cuts } = puzzleDescription;\n\n    // create the shape, doing all the essential geometry\n    // create only goes far enough to figure out how many stickers per\n    // face, and what the short edge is.  If the short edge is too short,\n    // we probably don't want to display or manipulate this one.  How\n    // short is too short is hard to say.\n    this.moveplanes = [];\n    this.moveplanes2 = [];\n    this.faces = [];\n    this.cubies = [];\n    let g = null;\n    switch (shape) {\n      case \"c\": {\n        g = cube();\n        break;\n      }\n      case \"o\": {\n        g = octahedron();\n        break;\n      }\n      case \"i\": {\n        g = icosahedron();\n        break;\n      }\n      case \"t\": {\n        g = tetrahedron();\n        break;\n      }\n      case \"d\": {\n        g = dodecahedron();\n        break;\n      }\n      default:\n        throw new Error(`Bad shape argument: ${shape}`);\n    }\n    this.rotations = closure(g);\n    if (this.options.verbosity) {\n      console.log(`# Rotations: ${this.rotations.length}`);\n    }\n    const baseplane = g[0];\n    this.baseplanerot = uniqueplanes(baseplane, this.rotations);\n    const baseplanes = this.baseplanerot.map((_) => baseplane.rotateplane(_));\n    this.baseplanes = baseplanes;\n    this.baseFaceCount = baseplanes.length as BaseFaceCount;\n    const net = defaultnets()[baseplanes.length];\n    this.net = net;\n    this.colors = defaultcolors()[baseplanes.length];\n    if (this.options.verbosity > 0) {\n      console.log(`# Base planes: ${baseplanes.length}`);\n    }\n    const baseface = getface(baseplanes);\n    const zero = new Quat(0, 0, 0, 0);\n    if (this.options.verbosity > 0) {\n      console.log(`# Face vertices: ${baseface.length}`);\n    }\n    const facenormal = baseplanes[0].makenormal();\n    const edgenormal = baseface[0].sum(baseface[1]).makenormal();\n    const vertexnormal = baseface[0].makenormal();\n    const boundary = new Quat(1, facenormal.b, facenormal.c, facenormal.d);\n    if (this.options.verbosity > 0) {\n      console.log(`# Boundary is ${boundary}`);\n    }\n    const planerot = uniqueplanes(boundary, this.rotations);\n    const planes = planerot.map((_) => boundary.rotateplane(_));\n    const firstface = getface(planes);\n    this.edgedistance = firstface[0]\n      .sum(firstface[1])\n      .smul(0.5)\n      .dist(zero);\n    this.vertexdistance = firstface[0].dist(zero);\n    const cutplanes = [];\n    const intersects = [];\n    let sawface = false; // what cuts did we see?\n    let sawedge = false;\n    let sawvertex = false;\n    for (const cut of cuts) {\n      let normal = null;\n      let distance = 0;\n      switch (cut.cutType) {\n        case \"f\": {\n          normal = facenormal;\n          distance = 1;\n          sawface = true;\n          break;\n        }\n        case \"v\": {\n          normal = vertexnormal;\n          distance = this.vertexdistance;\n          sawvertex = true;\n          break;\n        }\n        case \"e\": {\n          normal = edgenormal;\n          distance = this.edgedistance;\n          sawedge = true;\n          break;\n        }\n        default:\n          throw new Error(`Bad cut argument: ${cut.cutType}`);\n      }\n      cutplanes.push(normal.makecut(cut.distance));\n      intersects.push(cut.distance < distance);\n    }\n    if (this.options.addRotations) {\n      if (!sawface) {\n        cutplanes.push(facenormal.makecut(10));\n      }\n      if (!sawvertex) {\n        cutplanes.push(vertexnormal.makecut(10));\n      }\n      if (!sawedge) {\n        cutplanes.push(edgenormal.makecut(10));\n      }\n    }\n    this.basefaces = [];\n    for (const baseplanerot of this.baseplanerot) {\n      const face = baseplanerot.rotateface(firstface);\n      this.basefaces.push(new Face(face));\n    }\n    //\n    //   Determine names for edges, vertices, and planes.  Planes are defined\n    //   by the plane normal/distance; edges are defined by the midpoint;\n    //   vertices are defined by actual point.  In each case we define a name.\n    //   Note that edges have two potential names, and corners have n! where\n    //   n planes meet at a vertex.  We set names by choosing the marked face\n    //   first, and going counterclockwise around.\n    //\n    const facenames: [Quat[], string][] = [];\n    const faceplanes: [Quat, string][] = [];\n    const vertexnames: any[] = [];\n    const edgenames: any[] = [];\n    const edgesperface = firstface.length;\n    function searchaddelement(a: any[], p: Quat, name: any): void {\n      for (const el of a) {\n        if (el[0].dist(p) < eps) {\n          el.push(name);\n          return;\n        }\n      }\n      a.push([p, name]);\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        searchaddelement(edgenames, midpoint, i);\n      }\n    }\n    const otherfaces = [];\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const facelist = [];\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        const el = edgenames[findelement(edgenames, midpoint)];\n        if (i === el[1]) {\n          facelist.push(el[2]);\n        } else if (i === el[2]) {\n          facelist.push(el[1]);\n        } else {\n          throw new Error(\"Could not find edge\");\n        }\n      }\n      otherfaces.push(facelist);\n    }\n    const facenametoindex: any = {};\n    const faceindextoname: string[] = [];\n    faceindextoname.push(net[0][0]);\n    facenametoindex[net[0][0]] = 0;\n    faceindextoname[otherfaces[0][0]] = net[0][1];\n    facenametoindex[net[0][1]] = otherfaces[0][0];\n    for (const neti of net) {\n      const f0 = neti[0];\n      const fi = facenametoindex[f0];\n      if (fi === undefined) {\n        throw new Error(\"Bad edge description; first edge not connected\");\n      }\n      let ii = -1;\n      for (let j = 0; j < otherfaces[fi].length; j++) {\n        const fn2 = faceindextoname[otherfaces[fi][j]];\n        if (fn2 !== undefined && fn2 === neti[1]) {\n          ii = j;\n          break;\n        }\n      }\n      if (ii < 0) {\n        throw new Error(\"First element of a net not known\");\n      }\n      for (let j = 2; j < neti.length; j++) {\n        if (neti[j] === \"\") {\n          continue;\n        }\n        const of = otherfaces[fi][(j + ii - 1) % edgesperface];\n        const fn2 = faceindextoname[of];\n        if (fn2 !== undefined && fn2 !== neti[j]) {\n          throw new Error(\"Face mismatch in net\");\n        }\n        faceindextoname[of] = neti[j];\n        facenametoindex[neti[j]] = of;\n      }\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const faceplane = boundary.rotateplane(this.baseplanerot[i]);\n      const facename = faceindextoname[i];\n      facenames.push([face, facename]);\n      faceplanes.push([faceplane, facename]);\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const facename = faceindextoname[i];\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        const jjj = (j + 2) % face.length;\n        const midpoint2 = face[jj].sum(face[jjj]).smul(0.5);\n        const e1 = findelement(edgenames, midpoint);\n        const e2 = findelement(edgenames, midpoint2);\n        searchaddelement(vertexnames, face[jj], [facename, e2, e1]);\n      }\n    }\n    this.swizzler = new FaceNameSwizzler(facenames.map((_) => _[1]));\n    const sep = this.swizzler.prefixFree ? \"\" : \"_\";\n    // fix the edge names; use face precedence order\n    const oridata = orientationDefaults[this.baseFaceCount];\n    const markedface = [];\n    for (let i = 0; i < this.baseFaceCount; i++) {\n      markedface[1 << i] = i;\n    }\n    // FIXME  eliminate the duplications below\n    {\n      const oriprefs = oridata[\"v\"];\n      for (const name of oriprefs) {\n        const fn = this.swizzler.splitByFaceNames(name);\n        let bits = 0;\n        for (const i of fn) {\n          bits |= 1 << i;\n        }\n        markedface[bits] = fn[0];\n      }\n    }\n    {\n      const oriprefs = oridata[\"e\"];\n      for (const name of oriprefs) {\n        const fn = this.swizzler.splitByFaceNames(name);\n        let bits = 0;\n        for (const i of fn) {\n          bits |= 1 << i;\n        }\n        markedface[bits] = fn[0];\n      }\n    }\n    {\n      const oriprefs = oridata[\"c\"];\n      for (const name of oriprefs) {\n        const fn = this.swizzler.splitByFaceNames(name);\n        const bits = (1 << fn[0]) | (1 << this.baseFaceCount);\n        markedface[bits] = fn[1];\n      }\n    }\n    for (let i = 0; i < edgenames.length; i++) {\n      if (edgenames[i].length !== 3) {\n        throw new Error(`Bad length in edge names ${edgenames[i]}`);\n      }\n      const f1 = edgenames[i][1];\n      const f2 = edgenames[i][2];\n      let c1 = faceindextoname[f1];\n      const c2 = faceindextoname[f2];\n      const bits = (1 << f1) | (1 << f2);\n      if (markedface[bits] === f1) {\n        c1 = c1 + sep + c2;\n      } else {\n        c1 = c2 + sep + c1;\n      }\n      edgenames[i] = [edgenames[i][0], c1];\n    }\n    // fix the vertex names; counterclockwise rotations; proper orientation.\n    for (let i = 0; i < vertexnames.length; i++) {\n      let bits = 0;\n      if (vertexnames[i].length < 4) {\n        throw new Error(\"Bad length in vertex names\");\n      }\n      for (let j = 1; j < vertexnames[i].length; j++) {\n        bits |= 1 << facenametoindex[vertexnames[i][j][0]];\n      }\n      const fi = markedface[bits];\n      let st = -1;\n      for (let j = 1; j < vertexnames[i].length; j++) {\n        if (fi === facenametoindex[vertexnames[i][j][0]]) {\n          st = j;\n        }\n      }\n      if (st < 0) {\n        throw new Error(\n          \"Internal error; couldn't find face name when fixing corners\",\n        );\n      }\n      let r = \"\";\n      for (let j = 1; j < vertexnames[i].length; j++) {\n        if (j === 1) {\n          r = vertexnames[i][st][0];\n        } else {\n          r = r + sep + vertexnames[i][st][0];\n        }\n        for (let k = 1; k < vertexnames[i].length; k++) {\n          if (vertexnames[i][st][1] === vertexnames[i][k][2]) {\n            st = k;\n            break;\n          }\n        }\n      }\n      vertexnames[i] = [vertexnames[i][0], r];\n    }\n    this.markedface = markedface;\n    if (this.options.verbosity > 1) {\n      console.log(`# Face names: ${facenames.map((_) => _[1]).join(\" \")}`);\n      // TODO\n      console.log(`# Edge names: ${edgenames.map((_) => _[1]).join(\" \")}`);\n      // TODO\n      console.log(`# Vertex names: ${vertexnames.map((_) => _[1]).join(\" \")}`);\n    }\n    const geonormals: [Quat, string, string][] = [];\n    for (const faceplane of faceplanes) {\n      geonormals.push([faceplane[0].makenormal(), faceplane[1], \"f\"]);\n    }\n    for (const edgename of edgenames) {\n      geonormals.push([edgename[0].makenormal(), edgename[1], \"e\"]);\n    }\n    for (const vertexname of vertexnames) {\n      geonormals.push([vertexname[0].makenormal(), vertexname[1], \"v\"]);\n    }\n    this.facenames = facenames;\n    this.faceplanes = faceplanes;\n    this.edgenames = edgenames;\n    this.vertexnames = vertexnames;\n    this.geonormals = geonormals;\n    const geonormalnames = geonormals.map((_) => _[1]);\n    this.swizzler.setGripNames(geonormalnames);\n    if (this.options.verbosity > 0) {\n      console.log(\n        `# Distances: face ${1} edge ${this.edgedistance} vertex ${\n          this.vertexdistance\n        }`,\n      );\n    }\n    // expand cutplanes by rotations.  We only work with one face here.\n    for (let c = 0; c < cutplanes.length; c++) {\n      for (const rotation of this.rotations) {\n        const q = cutplanes[c].rotateplane(rotation);\n        let wasseen = false;\n        for (const moveplane of this.moveplanes) {\n          if (q.sameplane(moveplane)) {\n            wasseen = true;\n            break;\n          }\n        }\n        if (!wasseen) {\n          this.moveplanes.push(q);\n          if (intersects[c]) {\n            this.moveplanes2.push(q);\n          }\n        }\n      }\n    }\n    let ft = new FaceTree(firstface);\n    const tar = this.moveplanes2.slice();\n    // we want to use Math.random() here but we can't, because when\n    // we call multiple times we'll get different orbits/layouts.\n    // to resolve this, we use a very simple linear congruential\n    // generator.  for our purposes, the numbers don't need to be\n    // very random.\n    let rval = 31;\n    for (let i = 0; i < tar.length; i++) {\n      const j = i + Math.floor((tar.length - i) * (rval / 65536.0));\n      ft = ft.split(tar[j]);\n      tar[j] = tar[i];\n      rval = (rval * 1657 + 101) % 65536;\n    }\n    const faces = ft.collect([], true);\n    this.faces = faces;\n    if (this.options.verbosity > 0) {\n      console.log(`# Faces is now ${faces.length}`);\n    }\n    this.stickersperface = faces.length;\n    // the faces when rotated don't preserve the vertex order at this\n    // point.  to improve 3d rendering speed, we would like to preserve\n    // vertex order on rotation.  First, let's see what rotations preserve\n    // the base face; these are the ones we want to work with.\n    const simplerot: Quat[] = [];\n    const cm = centermassface(firstface);\n    for (const rotation of this.rotations) {\n      const f = rotation.rotateface(firstface);\n      if (cm.dist(centermassface(f)) < eps) {\n        simplerot.push(rotation);\n      }\n    }\n    const finished = new Array<boolean>(faces.length);\n    const sortme: [number, Quat, number][] = [];\n    for (let i = 0; i < faces.length; i++) {\n      const cm2 = faces[i].centermass();\n      sortme.push([cm.dist(cm2), cm2, i]);\n    }\n    sortme.sort((a, b) => a[0] - b[0]);\n    for (let ii = 0; ii < faces.length; ii++) {\n      const i = sortme[ii][2];\n      if (!finished[i]) {\n        finished[i] = true;\n        for (const rot of simplerot) {\n          const f2 = faces[i].rotate(rot);\n          const cm = f2.centermass();\n          for (let kk = ii + 1; kk < faces.length; kk++) {\n            if (sortme[kk][0] - sortme[ii][0] > eps) {\n              break;\n            }\n            const k = sortme[kk][2];\n            if (!finished[k] && cm.dist(sortme[kk][1]) < eps) {\n              finished[k] = true;\n              faces[k] = f2;\n              break;\n            }\n          }\n        }\n      }\n    }\n    //  Find and report the shortest edge in any of the faces.  If this\n    //  is small the puzzle is probably not practical or displayable.\n    this.shortedge = 1e99;\n    for (const face of faces) {\n      for (let j = 0; j < face.length; j++) {\n        const k = (j + 1) % face.length;\n        const t = face.get(j).dist(face.get(k));\n        if (t < this.shortedge) {\n          this.shortedge = t;\n        }\n      }\n    }\n    if (this.options.verbosity > 0) {\n      console.log(`# Short edge is ${this.shortedge}`);\n    }\n    // add nxnxn cube notation if it has cube face moves\n    if (shape === \"c\" && sawface && !sawedge && !sawvertex) {\n      // In this case the mapper adding is deferred until we\n      // know the number of slices.\n      this.addNotationMapper = \"NxNxNCubeMapper\";\n      // try to set Reid order of the cubies within an orbit\n      this.setReidOrder = true;\n    }\n    if (shape === \"c\" && sawvertex && !sawface && !sawedge) {\n      this.addNotationMapper = \"SkewbMapper\";\n    }\n    if (shape === \"t\" && (sawvertex || sawface) && !sawedge) {\n      this.addNotationMapper = \"PyraminxOrTetraminxMapper\";\n    }\n    if (shape === \"o\" && sawface) {\n      this.notationMapper = new FaceRenamingMapper(\n        this.swizzler,\n        new FaceNameSwizzler([\"F\", \"D\", \"L\", \"BL\", \"R\", \"U\", \"BR\", \"B\"]),\n      );\n      if (!(sawedge || sawvertex)) {\n        this.addNotationMapper = \"FTOMapper\";\n      }\n    }\n    if (shape === \"d\" && sawface) {\n      this.addNotationMapper = \"MegaminxMapper\";\n      this.notationMapper = new FaceRenamingMapper(\n        this.swizzler,\n        new FaceNameSwizzler([\n          \"U\",\n          \"F\",\n          \"L\",\n          \"BL\",\n          \"BR\",\n          \"R\",\n          \"FR\",\n          \"FL\",\n          \"DL\",\n          \"B\",\n          \"DR\",\n          \"D\",\n        ]),\n      );\n    }\n  }\n\n  private keyface(face: Face): string {\n    return this.keyface2(face.centermass());\n  }\n\n  private keyface2(cm: Quat): string {\n    // take a face and figure out the sides of each move plane\n    let s = \"\";\n    const sfcc = String.fromCharCode;\n    for (const moveplaneset of this.moveplanesets) {\n      if (moveplaneset.length > 0) {\n        const dv = cm.dot(moveplaneset[0]);\n        let t = 0;\n        let b = 1;\n        while (b * 2 <= moveplaneset.length) {\n          b *= 2;\n        }\n        for (; b > 0; b >>= 1) {\n          if (t + b <= moveplaneset.length && dv > moveplaneset[t + b - 1].a) {\n            t += b;\n          }\n        }\n        if (t < 47) {\n          s = s + sfcc(33 + t);\n        } else if (t < 47 + 47 * 47) {\n          s = s + sfcc(33 + 47 + Math.floor(t / 47) - 1) + sfcc(33 + (t % 47));\n        } else if (t < 47 + 47 * 47 + 47 * 47 * 47) {\n          s =\n            s +\n            sfcc(33 + 47 + Math.floor((t - 47) / (47 * 47) - 1)) +\n            sfcc(33 + 47 + (Math.floor((t - 47) / 47) % 47)) +\n            sfcc(33 + (t % 47));\n        } else {\n          throw Error(\"Too many slices for cubie encoding\");\n        }\n      }\n    }\n    return s;\n  }\n\n  // same as above, but instead of returning an encoded string, return\n  // an array with offsets.\n  private keyface3(face: Face): number[] {\n    const cm = face.centermass();\n    // take a face and figure out the sides of each move plane\n    const r = [];\n    for (const moveplaneset of this.moveplanesets) {\n      if (moveplaneset.length > 0) {\n        const dv = cm.dot(moveplaneset[0]);\n        let t = 0;\n        let b = 1;\n        while (b * 2 <= moveplaneset.length) {\n          b *= 2;\n        }\n        for (; b > 0; b >>= 1) {\n          if (t + b <= moveplaneset.length && dv > moveplaneset[t + b - 1].a) {\n            t += b;\n          }\n        }\n        r.push(t);\n      }\n    }\n    return r;\n  }\n\n  private findface(cm: Quat): number {\n    const key = this.keyface2(cm);\n    const arr = this.facelisthash.get(key)!;\n    if (arr.length === 1) {\n      return arr[0];\n    }\n    for (let i = 0; i + 1 < arr.length; i++) {\n      const face2 = this.facelisthash.get(key)![i];\n      if (Math.abs(cm.dist(this.facecentermass[face2])) < eps) {\n        return face2;\n      }\n    }\n    return arr[arr.length - 1];\n  }\n\n  private project2d(\n    facen: number,\n    edgen: number,\n    targvec: Quat[],\n  ): [Quat, Quat, Quat] {\n    // calculate geometry to map a particular edge of a particular\n    //  face to a given 2D vector.  The face is given as an index into the\n    //  facenames/baseplane arrays, and the edge is given as an offset into\n    //  the vertices.\n    const face = this.facenames[facen][0];\n    const edgen2 = (edgen + 1) % face.length;\n    const plane = this.baseplanes[facen];\n    let x0 = face[edgen2].sub(face[edgen]);\n    const olen = x0.len();\n    x0 = x0.normalize();\n    const y0 = x0.cross(plane).normalize();\n    let delta = targvec[1].sub(targvec[0]);\n    const len = delta.len() / olen;\n    delta = delta.normalize();\n    const cosr = delta.b;\n    const sinr = delta.c;\n    const x1 = x0.smul(cosr).sub(y0.smul(sinr)).smul(len);\n    const y1 = y0.smul(cosr).sum(x0.smul(sinr)).smul(len);\n    const off = new Quat(\n      0,\n      targvec[0].b - x1.dot(face[edgen]),\n      targvec[0].c - y1.dot(face[edgen]),\n      0,\n    );\n    return [x1, y1, off];\n  }\n\n  public allstickers(): void {\n    const t1 = tstart(\"allstickers\");\n    // next step is to calculate all the stickers and orbits\n    // We do enough work here to display the cube on the screen.\n    // take our newly split base face and expand it by the rotation matrix.\n    // this generates our full set of \"stickers\".\n    this.faces = expandfaces(this.baseplanerot, this.faces);\n    if (this.options.verbosity > 0) {\n      console.log(`# Total stickers is now ${this.faces.length}`);\n    }\n    this.facecentermass = new Array(this.faces.length);\n    for (let i = 0; i < this.faces.length; i++) {\n      this.facecentermass[i] = this.faces[i].centermass();\n    }\n    // Split moveplanes into a list of parallel planes.\n    const moveplanesets: Quat[][] = [];\n    const moveplanenormals: Quat[] = [];\n    // get the normals, first, from unfiltered moveplanes.\n    for (const q of this.moveplanes) {\n      const qnormal = q.makenormal();\n      let wasseen = false;\n      for (const moveplanenormal of moveplanenormals) {\n        if (qnormal.sameplane(moveplanenormal.makenormal())) {\n          wasseen = true;\n        }\n      }\n      if (!wasseen) {\n        moveplanenormals.push(qnormal);\n        moveplanesets.push([]);\n      }\n    }\n    for (const q of this.moveplanes2) {\n      const qnormal = q.makenormal();\n      for (let j = 0; j < moveplanenormals.length; j++) {\n        if (qnormal.sameplane(moveplanenormals[j])) {\n          moveplanesets[j].push(q);\n          break;\n        }\n      }\n    }\n    // make the normals all face the same way in each set.\n    for (let i = 0; i < moveplanesets.length; i++) {\n      const q: Quat[] = moveplanesets[i].map((_) => _.normalizeplane());\n      const goodnormal = moveplanenormals[i];\n      for (let j = 0; j < q.length; j++) {\n        if (q[j].makenormal().dist(goodnormal) > eps) {\n          q[j] = q[j].smul(-1);\n        }\n      }\n      q.sort((a, b) => a.a - b.a);\n      moveplanesets[i] = q;\n    }\n    this.moveplanesets = moveplanesets;\n    this.moveplanenormals = moveplanenormals;\n    const sizes = moveplanesets.map((_) => _.length);\n    if (this.options.verbosity > 0) {\n      console.log(`# Move plane sets: ${sizes}`);\n    }\n    // for each of the move planes, find the rotations that are relevant\n    const moverotations: Quat[][] = [];\n    for (let i = 0; i < moveplanesets.length; i++) {\n      moverotations.push([]);\n    }\n    for (const q of this.rotations) {\n      if (Math.abs(Math.abs(q.a) - 1) < eps) {\n        continue;\n      }\n      const qnormal = q.makenormal();\n      for (let j = 0; j < moveplanesets.length; j++) {\n        if (qnormal.sameplane(moveplanenormals[j])) {\n          moverotations[j].push(q);\n          break;\n        }\n      }\n    }\n    this.moverotations = moverotations;\n    //  Sort the rotations by the angle of rotation.  A bit tricky because\n    //  while the norms should be the same, they need not be.  So we start\n    //  by making the norms the same, and then sorting.\n    for (let i = 0; i < moverotations.length; i++) {\n      const r = moverotations[i];\n      const goodnormal = r[0].makenormal();\n      for (let j = 0; j < r.length; j++) {\n        if (goodnormal.dist(r[j].makenormal()) > eps) {\n          r[j] = r[j].smul(-1);\n        }\n      }\n      r.sort((a, b) => a.angle() - b.angle());\n      if (moverotations[i][0].dot(moveplanenormals[i]) < 0) {\n        r.reverse();\n      }\n    }\n    const sizes2 = moverotations.map((_) => 1 + _.length);\n    this.movesetorders = sizes2;\n    const movesetgeos: [string, string, string, string, number][] = [];\n    let gtype = \"?\";\n    for (let i = 0; i < moveplanesets.length; i++) {\n      const p0 = moveplanenormals[i];\n      let neg = null;\n      let pos = null;\n      for (const geonormal of this.geonormals) {\n        const d = p0.dot(geonormal[0]);\n        if (Math.abs(d - 1) < eps) {\n          pos = [geonormal[1], geonormal[2]];\n          gtype = geonormal[2];\n        } else if (Math.abs(d + 1) < eps) {\n          neg = [geonormal[1], geonormal[2]];\n          gtype = geonormal[2];\n        }\n      }\n      if (pos === null || neg === null) {\n        throw new Error(\"Saw positive or negative sides as null\");\n      }\n      movesetgeos.push([\n        pos[0],\n        pos[1],\n        neg[0],\n        neg[1],\n        1 + moveplanesets[i].length,\n      ]);\n      if (this.addNotationMapper === \"NxNxNCubeMapper\" && gtype === \"f\") {\n        this.notationMapper = new NxNxNCubeMapper(1 + moveplanesets[i].length);\n        this.addNotationMapper = \"\";\n      }\n      if (\n        this.addNotationMapper === \"SkewbMapper\" &&\n        moveplanesets[0].length === 1\n      ) {\n        this.notationMapper = new SkewbNotationMapper(this.swizzler);\n        this.addNotationMapper = \"\";\n      }\n      if (this.addNotationMapper === \"PyraminxOrTetraminxMapper\") {\n        if (\n          moveplanesets[0].length === 2 &&\n          moveplanesets[0][0].a === 0.333333333333333 &&\n          moveplanesets[0][1].a === 1.66666666666667\n        ) {\n          this.notationMapper = new PyraminxNotationMapper(this.swizzler);\n          this.addNotationMapper = \"\";\n        } else {\n          this.notationMapper = new TetraminxNotationMapper(this.swizzler);\n          this.addNotationMapper = \"\";\n        }\n      }\n      if (this.addNotationMapper === \"MegaminxMapper\" && gtype === \"f\") {\n        if (1 + moveplanesets[i].length === 3) {\n          this.notationMapper = new MegaminxScramblingNotationMapper(\n            this.notationMapper,\n          );\n        }\n        this.addNotationMapper = \"\";\n      }\n      if (this.addNotationMapper === \"FTOMapper\" && gtype === \"f\") {\n        if (1 + moveplanesets[i].length === 3) {\n          this.notationMapper = new FTONotationMapper(\n            this.notationMapper,\n            this.swizzler,\n          );\n        }\n        this.addNotationMapper = \"\";\n      }\n    }\n    this.movesetgeos = movesetgeos;\n    //  Cubies are split by move plane sets.  For each cubie we can\n    //  average its points to find a point on the interior of that\n    //  cubie.  We can then check that point against all the move\n    //  planes and from that derive a coordinate for the cubie.\n    //  This also works for faces; no face should ever lie on a move\n    //  plane.  This allows us to take a set of stickers and break\n    //  them up into cubie sets.\n    const facelisthash = new Map();\n    const faces = this.faces;\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      const s = this.keyface(face);\n      if (!facelisthash.get(s)) {\n        facelisthash.set(s, [i]);\n      } else {\n        const arr = facelisthash.get(s)!;\n        arr.push(i);\n        //  If we find a core cubie, split it up into multiple cubies,\n        //  because ksolve doesn't handle orientations that are not\n        //  cyclic, and the rotation group of the core is not cyclic.\n        if (arr.length === this.baseFaceCount) {\n          if (this.options.verbosity > 0) {\n            console.log(\"# Splitting core.\");\n          }\n          for (let suff = 0; suff < arr.length; suff++) {\n            const s2 = `${s} ${suff}`;\n            facelisthash.set(s2, [arr[suff]]);\n          }\n        }\n      }\n    }\n    this.facelisthash = facelisthash;\n    if (this.options.verbosity > 0) {\n      console.log(`# Cubies: ${facelisthash.size}`);\n    }\n    const cubies: number[][] = [];\n    const facetocubie = [];\n    const facetoord = [];\n    for (const facelist of facelisthash.values()) {\n      if (facelist.length === this.baseFaceCount) {\n        // this is the original \"cubie\" of a split core; we ignore it.\n        continue;\n      }\n      //  Sort the faces around each corner so they are counterclockwise.  Only\n      //  relevant for cubies that actually are corners (three or more\n      //  faces).  In general cubies might have many faces; for icosohedrons\n      //  there are five faces on the corner cubies.\n      if (facelist.length > 1) {\n        const cm = facelist.map((_: number) => faces[_].centermass());\n        const cmall = centermassface(cm);\n        for (let looplimit = 0; facelist.length > 2; looplimit++) {\n          let changed = false;\n          for (let i = 0; i < facelist.length; i++) {\n            const j = (i + 1) % facelist.length;\n            // var ttt = cmall.dot(cm[i].cross(cm[j])) ; // TODO\n            if (cmall.dot(cm[i].cross(cm[j])) < 0) {\n              const u = cm[i];\n              cm[i] = cm[j];\n              cm[j] = u;\n              const v = facelist[i];\n              facelist[i] = facelist[j];\n              facelist[j] = v;\n              changed = true;\n            }\n          }\n          if (!changed) {\n            break;\n          }\n          if (looplimit > 1000) {\n            throw new Error(\"Bad epsilon math; too close to border\");\n          }\n        }\n        // set the orientations by finding the marked face and putting it first.\n        let bits = 0;\n        for (const f of facelist) {\n          bits |= 1 << Math.floor(f / this.stickersperface);\n        }\n        const markedface = this.markedface[bits]!;\n        let mini = -1;\n        for (let i = 0; i < facelist.length; i++) {\n          if (Math.floor(facelist[i] / this.stickersperface) === markedface) {\n            mini = i;\n          }\n        }\n        if (mini < 0) {\n          throw new Error(\"Could not find marked face in list\");\n        }\n        if (mini !== 0) {\n          const ofacelist = facelist.slice();\n          for (let i = 0; i < facelist.length; i++) {\n            facelist[i] = ofacelist[(mini + i) % facelist.length];\n          }\n        }\n      }\n      for (let j = 0; j < facelist.length; j++) {\n        const k = facelist[j];\n        facetocubie[k] = cubies.length;\n        facetoord[k] = j;\n      }\n      cubies.push(facelist);\n    }\n    this.cubies = cubies;\n    this.facetocubie = facetocubie;\n    this.facetoord = facetoord;\n    //  Calculate the orbits of each cubie.  Assumes we do all moves.\n    //  Also calculates which cubies are identical.\n    const typenames = [\"?\", \"CENTERS\", \"EDGES\", \"CORNERS\", \"C4RNER\", \"C5RNER\"];\n    const cubiesetnames = [];\n    const cubietypecounts = [0, 0, 0, 0, 0, 0];\n    const orbitoris = [];\n    const seen = [];\n    let cubiesetnum = 0;\n    const cubiesetnums = [];\n    const cubieordnums = [];\n    const cubieords = [];\n    const cubievaluemap = [];\n    // Later we will make this smarter to use a get color for face function\n    // so we support puzzles with multiple faces the same color\n    const getcolorkey = (cubienum: number): string => {\n      return cubies[cubienum].map((_) => this.getfaceindex(_)).join(\" \");\n    };\n    const cubiesetcubies: any = [];\n    for (let i = 0; i < cubies.length; i++) {\n      const cubie = cubies[i];\n      if (cubie.length === 0) {\n        continue;\n      }\n      if (seen[i]) {\n        continue;\n      }\n      const cubiekeymap: any = {};\n      let cubievalueid = 0;\n      cubieords.push(0);\n      cubiesetcubies.push([]);\n      const facecnt = cubie.length;\n      const typectr = cubietypecounts[facecnt]++;\n      let typename = typenames[facecnt];\n      if (typename === undefined || facecnt === this.baseFaceCount) {\n        typename = \"CORE\";\n      }\n      typename = typename + (typectr === 0 ? \"\" : typectr + 1);\n      cubiesetnames[cubiesetnum] = typename;\n      orbitoris[cubiesetnum] = facecnt;\n      const queue = [i];\n      let qg = 0;\n      seen[i] = true;\n      while (qg < queue.length) {\n        const cind = queue[qg++];\n        const cubiecolorkey = getcolorkey(cind);\n        if (cubie.length > 1 || cubiekeymap[cubiecolorkey] === undefined) {\n          cubiekeymap[cubiecolorkey] = cubievalueid++;\n        }\n        cubievaluemap[cind] = cubiekeymap[cubiecolorkey];\n        cubiesetnums[cind] = cubiesetnum;\n        cubiesetcubies[cubiesetnum].push(cind);\n        cubieordnums[cind] = cubieords[cubiesetnum]++;\n        if (queue.length < this.rotations.length) {\n          const cm = this.facecentermass[cubies[cind][0]];\n          for (const moverotation of moverotations) {\n            const tq =\n              this.facetocubie[this.findface(cm.rotatepoint(moverotation[0]))];\n            if (!seen[tq]) {\n              queue.push(tq);\n              seen[tq] = true;\n            }\n          }\n        }\n      }\n      cubiesetnum++;\n    }\n    if (\n      this.setReidOrder &&\n      4 <= this.stickersperface &&\n      this.stickersperface <= 9\n    ) {\n      const reidorder = [\n        [\n          \"UF\",\n          \"UR\",\n          \"UB\",\n          \"UL\",\n          \"DF\",\n          \"DR\",\n          \"DB\",\n          \"DL\",\n          \"FR\",\n          \"FL\",\n          \"BR\",\n          \"BL\",\n        ],\n        [\"UFR\", \"URB\", \"UBL\", \"ULF\", \"DRF\", \"DFL\", \"DLB\", \"DBR\"],\n        [\"U\", \"L\", \"F\", \"R\", \"B\", \"D\"],\n      ];\n      const reidmap: { [key: number]: number } = {};\n      for (const cubie of reidorder) {\n        for (let j = 0; j < cubie.length; j++) {\n          let mask = 0;\n          for (let k = 0; k < cubie[j].length; k++) {\n            mask |= 1 << (cubie[j].charCodeAt(k) - 65);\n          }\n          reidmap[mask] = j;\n        }\n      }\n      for (const cubieset of cubiesetcubies) {\n        for (const cubienum of cubieset) {\n          let mask = 0;\n          for (const cubie of cubies[cubienum]) {\n            mask |=\n              1 <<\n              (this.facenames[this.getfaceindex(cubie)][1].charCodeAt(0) - 65);\n          }\n          cubieordnums[cubienum] = reidmap[mask];\n        }\n      }\n    }\n    this.cubiesetnums = cubiesetnums;\n    this.cubieordnums = cubieordnums;\n    this.cubiesetnames = cubiesetnames;\n    this.cubieords = cubieords;\n    this.orbitoris = orbitoris;\n    this.cubievaluemap = cubievaluemap;\n    this.cubiesetcubies = cubiesetcubies;\n    // if we fix a cubie, find a cubie to fix\n    if (this.options.fixedPieceType !== null) {\n      for (let i = 0; i < cubies.length; i++) {\n        if (\n          (this.options.fixedPieceType === \"v\" && cubies[i].length > 2) ||\n          (this.options.fixedPieceType === \"e\" && cubies[i].length === 2) ||\n          (this.options.fixedPieceType === \"f\" && cubies[i].length === 1)\n        ) {\n          this.fixedCubie = i;\n          break;\n        }\n      }\n      if (this.fixedCubie < 0) {\n        throw new Error(\n          `Could not find a cubie of type ${this.options.fixedPieceType} to fix.`,\n        );\n      }\n    }\n    // show the orbits\n    if (this.options.verbosity > 0) {\n      console.log(`# Cubie orbit sizes ${cubieords}`);\n    }\n    tend(t1);\n  }\n\n  public unswizzle(mv: Move): Move | null {\n    const newmv = this.notationMapper.notationToInternal(mv);\n    if (newmv === null) {\n      return null;\n    }\n    return newmv.modified({ family: this.swizzler.unswizzle(newmv.family) });\n  }\n\n  // We use an extremely permissive parse here; any character but\n  // digits are allowed in a family name.\n  private stringToBlockMove(mv: string): Move {\n    // parse a move from the command line\n    const re = RegExp(\"^(([0-9]+)-)?([0-9]+)?([^0-9]+)([0-9]+'?)?$\");\n    const p = mv.match(re);\n    if (p === null) {\n      throw new Error(`Bad move passed ${mv}`);\n    }\n    const grip = p[4];\n    let loslice = undefined;\n    let hislice = undefined;\n    if (p[2] !== undefined) {\n      if (p[3] === undefined) {\n        throw new Error(\"Missing second number in range\");\n      }\n      loslice = parseInt(p[2], 10);\n    }\n    if (p[3] !== undefined) {\n      hislice = parseInt(p[3], 10);\n    }\n    let amountstr = \"1\";\n    let amount = 1;\n    if (p[5] !== undefined) {\n      amountstr = p[5];\n      if (amountstr[0] === \"'\") {\n        amountstr = `-${amountstr.substring(1)}`;\n      }\n      amount = parseInt(amountstr, 10);\n    }\n    return new Move(new QuantumMove(grip, hislice, loslice), amount);\n  }\n\n  public parseMove(\n    move: Move,\n  ): [string | undefined, number, number, number, boolean, number] {\n    const bm = this.notationMapper.notationToInternal(move); // pluggable notation\n    if (bm === null) {\n      throw new Error(`Bad move ${move.family}`);\n    }\n    move = bm;\n    let grip = move.family;\n    let fullrotation = false;\n    if (grip.endsWith(\"v\") && grip[0] <= \"Z\") {\n      if (move.innerLayer !== undefined || move.outerLayer !== undefined) {\n        throw new Error(\"Cannot use a prefix with full cube rotations\");\n      }\n      grip = grip.slice(0, -1);\n      fullrotation = true;\n    }\n    if (grip.endsWith(\"w\") && grip[0] <= \"Z\") {\n      grip = grip.slice(0, -1).toLowerCase();\n    }\n    let geo;\n    let msi = -1;\n    const geoname = this.swizzler.unswizzle(grip);\n    let firstgrip = false;\n    for (let i = 0; i < this.movesetgeos.length; i++) {\n      const g = this.movesetgeos[i];\n      if (geoname === g[0]) {\n        firstgrip = true;\n        geo = g;\n        msi = i;\n      }\n      if (geoname === g[2]) {\n        firstgrip = false;\n        geo = g;\n        msi = i;\n      }\n    }\n    let loslice = 1;\n    let hislice = 1;\n    if (grip.toUpperCase() !== grip) {\n      hislice = 2;\n    }\n    if (geo === undefined) {\n      throw new Error(`Bad grip in move ${move.family}`);\n    }\n    if (move.outerLayer !== undefined) {\n      loslice = move.outerLayer;\n    }\n    if (move.innerLayer !== undefined) {\n      if (move.outerLayer === undefined) {\n        hislice = move.innerLayer;\n        // big assumption here!  if outerlayer not specified, but inner\n        // layer is (like 2U), we use the case of the family (upper vs\n        // lower) to decide if it should be a slice turn or a wide turn.\n        if (grip <= \"Z\") {\n          // uppercase; slice move\n          loslice = hislice;\n        } else {\n          // lowercase; wide move\n          loslice = 1;\n        }\n      } else {\n        hislice = move.innerLayer;\n      }\n    }\n    loslice--;\n    hislice--;\n    if (fullrotation) {\n      loslice = 0;\n      hislice = this.moveplanesets[msi].length;\n    }\n    if (\n      loslice < 0 ||\n      loslice > this.moveplanesets[msi].length ||\n      hislice < 0 ||\n      hislice > this.moveplanesets[msi].length\n    ) {\n      throw new Error(\n        `Bad slice spec ${loslice} ${hislice} vs ${this.moveplanesets[msi].length}`,\n      );\n    }\n    if (\n      !permissivieMoveParsing &&\n      loslice === 0 &&\n      hislice === this.moveplanesets[msi].length &&\n      !fullrotation\n    ) {\n      throw new Error(\n        \"! full puzzle rotations must be specified with v suffix.\",\n      );\n    }\n    return [undefined, msi, loslice, hislice, firstgrip, move.amount];\n  }\n\n  private parsemove(\n    mv: string,\n  ): [string | undefined, number, number, number, boolean, number] {\n    const r = this.parseMove(this.stringToBlockMove(mv));\n    r[0] = mv;\n    return r;\n  }\n\n  public genperms(): void {\n    const t1 = tstart(\"genperms\");\n    // generate permutations for moves\n    if (this.cmovesbyslice.length > 0) {\n      // did this already?\n      return;\n    }\n    const cmovesbyslice = [];\n    // if orientCenters is set, we find all cubies that have only one\n    // sticker and that sticker is in the center of a face, and we\n    // introduce duplicate stickers so we can orient them properly.\n    //\n    //  We also rotate the vertices of the face to enforce the orientation\n    //  preferences for the oriented center stickers.\n    if (this.options.orientCenters) {\n      for (let k = 0; k < this.cubies.length; k++) {\n        if (this.cubies[k].length === 1) {\n          const kk = this.cubies[k][0];\n          const i = this.getfaceindex(kk);\n          const center = this.basefaces[i].centermass();\n          if (center.dist(this.facecentermass[kk]) < eps) {\n            const bits = (1 << i) | (1 << this.baseFaceCount);\n            const towards = this.markedface[bits];\n            const normal = this.baseplanes[towards].makenormal();\n            let hiv = -1;\n            let hii = -1;\n            for (let ii = 0; ii < this.faces[kk].length; ii++) {\n              const pt = this.faces[kk].get(ii);\n              const t = normal.dot(pt.sub(center));\n              if (t > hiv) {\n                hiv = t;\n                hii = ii;\n              }\n            }\n            // if two pts have the same distance, prefer the second\n            const hii2 = (hii + 1) % this.faces[kk].length;\n            if (\n              Math.abs(normal.dot(this.faces[kk].get(hii2).sub(center)) - hiv) <\n              eps\n            ) {\n              hii = hii2;\n            }\n            // remake the face to preserve orientations\n            if (hii !== 0) {\n              const qs = [];\n              for (let ii = 0; ii < this.faces[kk].length; ii++) {\n                qs.push(this.faces[kk].get((ii + hii) % this.faces[kk].length));\n              }\n              this.faces[kk] = new Face(qs);\n            }\n            const o = this.basefaces[i].length;\n            for (let m = 1; m < o; m++) {\n              this.cubies[k].push(this.cubies[k][m - 1]);\n            }\n            this.duplicatedFaces[kk] = o;\n            this.duplicatedCubies[k] = o;\n            this.orbitoris[this.cubiesetnums[k]] = o;\n          }\n        }\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveplaneset = this.moveplanesets[k];\n      const slicenum = [];\n      const slicecnts = [moveplaneset.length + 1, 0];\n      let bhi = 1;\n      while (bhi * 2 <= moveplaneset.length) {\n        bhi *= 2;\n      }\n      for (let i = 0; i < this.faces.length; i++) {\n        let t = 0;\n        if (moveplaneset.length > 0) {\n          const dv = this.facecentermass[i].dot(moveplaneset[0]);\n          for (let b = bhi; b > 0; b >>= 1) {\n            if (\n              t + b <= moveplaneset.length &&\n              dv > moveplaneset[t + b - 1].a\n            ) {\n              t += b;\n            }\n          }\n          t = moveplaneset.length - t;\n        }\n        slicenum.push(t);\n        while (slicecnts.length <= t) {\n          slicecnts.push(0);\n        }\n        slicecnts[t]++;\n      }\n      const axiscmoves = new Array(slicecnts.length);\n      for (let sc = 0; sc < slicecnts.length; sc++) {\n        axiscmoves[sc] = [];\n      }\n      const cubiedone = [];\n      for (let i = 0; i < this.faces.length; i++) {\n        if (slicenum[i] < 0) {\n          continue;\n        }\n        const b = [this.facetocubie[i], this.facetoord[i]];\n        let cm = this.facecentermass[i];\n        const ocm = cm;\n        let fi2 = i;\n        const sc = slicenum[fi2];\n        for (;;) {\n          slicenum[fi2] = -1;\n          const cm2 = cm.rotatepoint(this.moverotations[k][0]);\n          if (cm2.dist(ocm) < eps) {\n            break;\n          }\n          fi2 = this.findface(cm2);\n          b.push(this.facetocubie[fi2], this.facetoord[fi2]);\n          cm = cm2;\n        }\n        // If an oriented center is moving, we need to figure out\n        // the appropriate new orientation.  Normally we use the cubie\n        // sticker identity to locate, but this doesn't work here.\n        // Instead we need to redo the geometry of the sticker itself\n        // rotating and figure out how that maps to the destination\n        // sticker.\n        //\n        // We only need to do this for central center stickers: those\n        // where the face vertex goes through the center.  The others\n        // don't actually need orientation because they can only be\n        // in one orientation by physical constraints.  (You can't spin\n        // a point or cross sticker on the 5x5x5, for example.)\n        //\n        // This also simplifies things because it means the actual\n        // remapping has the same order as the moves themselves.\n        //\n        // The center may or may not have been duplicated at this point.\n        //\n        // The move moving the center might not be the same modulo as the\n        // center itself.\n        if (\n          b.length > 2 &&\n          this.options.orientCenters &&\n          (this.cubies[b[0]].length === 1 || this.duplicatedCubies[b[0]] > 1)\n        ) {\n          // is this a real center cubie, around an axis?\n          if (\n            this.facecentermass[i].dist(\n              this.basefaces[this.getfaceindex(i)].centermass(),\n            ) < eps\n          ) {\n            // how does remapping of the face/point set map to the original?\n            let face1 = this.faces[this.cubies[b[0]][0]];\n            for (let ii = 0; ii < b.length; ii += 2) {\n              const face0 = this.faces[this.cubies[b[ii]][0]];\n              let o = -1;\n              for (let jj = 0; jj < face1.length; jj++) {\n                if (face0.get(jj).dist(face1.get(0)) < eps) {\n                  o = jj;\n                  break;\n                }\n              }\n              if (o < 0) {\n                throw new Error(\n                  \"Couldn't find rotation of center faces; ignoring for now.\",\n                );\n              } else {\n                b[ii + 1] = o;\n                face1 = face1.rotate(this.moverotations[k][0]);\n              }\n            }\n          }\n        }\n        // b.length === 2 means a sticker is spinning in place.\n        // in this case we add duplicate stickers\n        // so that we can make it animate properly in a 3D world.\n        if (b.length === 2 && this.options.orientCenters) {\n          for (let ii = 1; ii < this.movesetorders[k]; ii++) {\n            if (sc === 0) {\n              b.push(b[0], ii);\n            } else {\n              b.push(\n                b[0],\n                (this.movesetorders[k] - ii) % this.movesetorders[k],\n              );\n            }\n          }\n        }\n        if (b.length > 2 && !cubiedone[b[0]]) {\n          if (b.length !== 2 * this.movesetorders[k]) {\n            throw new Error(\"Bad length in perm gen\");\n          }\n          for (const v of b) {\n            axiscmoves[sc].push(v);\n          }\n        }\n        for (let j = 0; j < b.length; j += 2) {\n          cubiedone[b[j]] = true;\n        }\n      }\n      for (let kk = 0; kk < axiscmoves.length; kk++) {\n        axiscmoves[kk] = axiscmoves[kk].slice();\n      }\n      cmovesbyslice.push(axiscmoves);\n    }\n    this.cmovesbyslice = cmovesbyslice;\n    if (this.options.moveList) {\n      const parsedmovelist: [\n        string | undefined,\n        number,\n        number,\n        number,\n        boolean,\n        number,\n      ][] = [];\n      // make sure the movelist makes sense based on the geos.\n      for (const moveString of this.options.moveList) {\n        parsedmovelist.push(this.parsemove(moveString));\n      }\n      this.parsedmovelist = parsedmovelist;\n    }\n    this.facelisthash.clear();\n    this.facecentermass = [];\n    tend(t1);\n  }\n\n  private getboundarygeometry(): any {\n    // get the boundary geometry\n    return {\n      baseplanes: this.baseplanes,\n      facenames: this.facenames,\n      faceplanes: this.faceplanes,\n      vertexnames: this.vertexnames,\n      edgenames: this.edgenames,\n      geonormals: this.geonormals,\n    };\n  }\n\n  private getmovesets(k: number): any {\n    // get the move sets we support based on slices\n    // for even values we omit the middle \"slice\".  This isn't perfect\n    // but it is what we do for now.\n    // if there was a move list specified, pull values from that\n    const slices = this.moveplanesets[k].length;\n    let r: any[] = [];\n    if (this.parsedmovelist !== undefined) {\n      for (const parsedmove of this.parsedmovelist) {\n        if (parsedmove[1] !== k) {\n          continue;\n        }\n        if (parsedmove[4]) {\n          r.push([parsedmove[2], parsedmove[3]]);\n        } else {\n          r.push([slices - parsedmove[3], slices - parsedmove[2]]);\n        }\n        r.push(parsedmove[5]);\n      }\n    } else if (this.options.vertexMoves && !this.options.allMoves) {\n      const msg = this.movesetgeos[k];\n      if (msg[1] !== msg[3]) {\n        for (let i = 0; i < slices; i++) {\n          if (msg[1] !== \"v\") {\n            if (this.options.outerBlockMoves) {\n              r.push([i + 1, slices]);\n            } else {\n              r.push([i + 1]);\n            }\n            r.push(1);\n          } else {\n            if (this.options.outerBlockMoves) {\n              r.push([0, i]);\n            } else {\n              r.push([i, i]);\n            }\n            r.push(1);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i <= slices; i++) {\n        if (!this.options.allMoves && i + i === slices) {\n          continue;\n        }\n        if (this.options.outerBlockMoves) {\n          if (i + i > slices) {\n            r.push([i, slices]);\n          } else {\n            r.push([0, i]);\n          }\n        } else {\n          r.push([i, i]);\n        }\n        r.push(1);\n      }\n    }\n    if (this.fixedCubie >= 0) {\n      const dep = this.keyface3(this.faces[this.cubies[this.fixedCubie][0]])[k];\n      const newr = [];\n      for (let i = 0; i < r.length; i += 2) {\n        let o = r[i];\n        if (dep >= o[0] && dep <= o[1]) {\n          if (o[0] === 0) {\n            o = [o[1] + 1, slices];\n          } else if (slices === o[1]) {\n            o = [0, o[0] - 1];\n          } else {\n            throw Error(\"fixed cubie option would disconnect move\");\n          }\n        }\n        let found = false;\n        for (let j = 0; j < newr.length; j += 2) {\n          if (\n            newr[j][0] === o[0] &&\n            newr[j][1] === o[1] &&\n            newr[j + 1] === r[i + 1]\n          ) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          newr.push(o);\n          newr.push(r[i + 1]);\n        }\n      }\n      r = newr;\n    }\n    // TODO\n    return r;\n  }\n\n  private graybyori(cubie: number): boolean {\n    let ori = this.cubies[cubie].length;\n    if (this.duplicatedCubies[cubie]) {\n      ori = 1;\n    }\n    return (\n      (ori === 1 &&\n        (this.options.grayCenters || !this.options.includeCenterOrbits)) ||\n      (ori === 2 &&\n        (this.options.grayEdges || !this.options.includeEdgeOrbits)) ||\n      (ori > 2 &&\n        (this.options.grayCorners || !this.options.includeCornerOrbits))\n    );\n  }\n\n  private skipbyori(cubie: number): boolean {\n    let ori = this.cubies[cubie].length;\n    if (this.duplicatedCubies[cubie]) {\n      ori = 1;\n    }\n    return (\n      (ori === 1 && !this.options.includeCenterOrbits) ||\n      (ori === 2 && !this.options.includeEdgeOrbits) ||\n      (ori > 2 && !this.options.includeCornerOrbits)\n    );\n  }\n\n  private skipcubie(fi: number): boolean {\n    return this.skipbyori(fi);\n  }\n\n  private header(comment: string): string {\n    return comment + copyright + \"\\n\" + comment + \"\\n\";\n  }\n\n  public writegap(): string {\n    // write out a gap set of generators\n    const os = this.getOrbitsDef(false);\n    const r = [];\n    const mvs = [];\n    for (let i = 0; i < os.moveops.length; i++) {\n      let movename = `M_${externalName(this.notationMapper, os.movenames[i])}`;\n      let doinv = false;\n      if (movename[movename.length - 1] === \"'\") {\n        movename = movename.substring(0, movename.length - 1);\n        doinv = true;\n      }\n      // gap doesn't like angle brackets in IDs\n      mvs.push(movename);\n      if (doinv) {\n        r.push(`${movename}:=${os.moveops[i].toPerm().inv().toGap()};`);\n      } else {\n        r.push(`${movename}:=${os.moveops[i].toPerm().toGap()};`);\n      }\n    }\n    r.push(\"Gen:=[\");\n    r.push(mvs.join(\",\"));\n    r.push(\"];\");\n    const ip = os.solved.identicalPieces();\n    r.push(\n      `ip:=[${ip\n        .map((_) => `[${_.map((__) => __ + 1).join(\",\")}]`)\n        .join(\",\")}];`,\n    );\n    r.push(\"# Size(Group(Gen));\");\n    r.push(\"# Size(Stabilizer(Group(Gen), ip, OnTuplesSets));\");\n    r.push(\"\");\n    return this.header(\"# \") + r.join(\"\\n\");\n  }\n\n  public writeksolve(name: string = \"PuzzleGeometryPuzzle\"): string {\n    const od = this.getOrbitsDef(false);\n    return (\n      this.header(\"# \") + od.toKsolve(name, this.notationMapper).join(\"\\n\")\n    );\n  }\n\n  public getKPuzzleDefinition(\n    fortwisty: boolean = true,\n    includemoves: boolean = true,\n  ): KPuzzleDefinition {\n    const od = this.getOrbitsDef(fortwisty, includemoves);\n    const internalDefinition = od.toKPuzzleDefinition(includemoves);\n    (internalDefinition as any).experimentalPuzzleDescription =\n      this.puzzleDescription;\n    if (!internalDefinition) {\n      throw new Error(\"Missing definition!\");\n    }\n    return internalDefinition;\n  }\n\n  public getMoveFromBits(\n    moverange: number[],\n    amount: number,\n    inverted: boolean,\n    axiscmoves: number[][],\n    setmoves: number[] | undefined,\n    movesetorder: number,\n  ): PGTransform {\n    const moveorbits: PGOrbit[] = [];\n    const perms = [];\n    const oris = [];\n    for (const len of this.cubieords) {\n      perms.push(iota(len));\n      oris.push(zeros(len));\n    }\n    for (let m = moverange[0]; m <= moverange[1]; m++) {\n      const slicecmoves = axiscmoves[m];\n      for (let j = 0; j < slicecmoves.length; j += 2 * movesetorder) {\n        const mperm = slicecmoves.slice(j, j + 2 * movesetorder);\n        const setnum = this.cubiesetnums[mperm[0]];\n        for (let ii = 0; ii < mperm.length; ii += 2) {\n          mperm[ii] = this.cubieordnums[mperm[ii]];\n        }\n        let inc = 2;\n        let oinc = 3;\n        if (inverted) {\n          inc = mperm.length - 2;\n          oinc = mperm.length - 1;\n        }\n        if (perms[setnum] === iota(this.cubieords[setnum])) {\n          perms[setnum] = perms[setnum].slice();\n          if (this.orbitoris[setnum] > 1 && !this.options.fixedOrientation) {\n            oris[setnum] = oris[setnum].slice();\n          }\n        }\n        for (let ii = 0; ii < mperm.length; ii += 2) {\n          perms[setnum][mperm[(ii + inc) % mperm.length]] = mperm[ii];\n          if (this.orbitoris[setnum] > 1 && !this.options.fixedOrientation) {\n            oris[setnum][mperm[ii]] =\n              (mperm[(ii + oinc) % mperm.length] -\n                mperm[(ii + 1) % mperm.length] +\n                2 * this.orbitoris[setnum]) %\n              this.orbitoris[setnum];\n          }\n        }\n      }\n    }\n    let lastId = new PGOrbit(iota(24), zeros(24), 1);\n    for (let ii = 0; ii < this.cubiesetnames.length; ii++) {\n      if (setmoves && !setmoves[ii]) {\n        continue;\n      }\n      if (this.orbitoris[ii] === 1 || this.options.fixedOrientation) {\n        if (perms[ii] === iota(lastId.perm.length)) {\n          if (perms[ii] !== lastId.perm) {\n            lastId = new PGOrbit(perms[ii], oris[ii], 1);\n          }\n          moveorbits.push(lastId);\n        } else {\n          moveorbits.push(new PGOrbit(perms[ii], oris[ii], 1));\n        }\n      } else {\n        const no = new Array<number>(oris[ii].length);\n        // convert ksolve oris to our internal ori rep\n        for (let jj = 0; jj < perms[ii].length; jj++) {\n          no[jj] = oris[ii][perms[ii][jj]];\n        }\n        moveorbits.push(new PGOrbit(perms[ii], no, this.orbitoris[ii]));\n      }\n    }\n    let mv = new PGTransform(moveorbits);\n    if (amount !== 1) {\n      mv = mv.mulScalar(amount);\n    }\n    return mv;\n  }\n\n  private omitSet(name: string): boolean {\n    for (const excludedSet of this.options.excludeOrbits) {\n      if (excludedSet === name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private diffmvsets(a: any[], b: any[], slices: number, neg: boolean) {\n    for (let i = 0; i < a.length; i += 2) {\n      let found = false;\n      for (let j = 0; !found && j < b.length; j += 2) {\n        if (neg) {\n          if (\n            a[i][0] + b[j][1] === slices &&\n            a[i][1] + b[j][0] === slices &&\n            a[i + 1] === b[j + 1]\n          ) {\n            found = true;\n          }\n        } else {\n          if (\n            a[i][0] === b[j][0] &&\n            a[i][1] === b[j][1] &&\n            a[i + 1] === b[j + 1]\n          ) {\n            found = true;\n          }\n        }\n      }\n      if (!found) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // TODO: This is only public for testing; can we make it private again?\n  public getOrbitsDef(\n    fortwisty: boolean,\n    includemoves: boolean = true,\n  ): PGOrbitsDef {\n    // generate a representation of the puzzle\n    const setmoves = [];\n    if (fortwisty) {\n      for (let i = 0; i < this.cubiesetnames.length; i++) {\n        setmoves.push(1);\n      }\n    }\n    const setnames: string[] = [];\n    const setdefs: PGOrbitDef[] = [];\n    // if both a movelist and rotations are needed, don't add rotations\n    // that do not preserve the movelist.\n    const mps = [];\n    const addrot = [];\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveset = this.getmovesets(k);\n      mps.push(moveset);\n      if (this.options.addRotations) {\n        addrot.push(1);\n      } else {\n        addrot.push(0);\n      }\n    }\n    const hasrotation = [];\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const slices = this.moveplanesets[k].length;\n      // if the move set includes a rotation around this axis, don't add any more\n      let sawone = false;\n      const moveset = mps[k];\n      for (let i = 0; i < moveset.length; i += 2) {\n        if (moveset[i][0] === 0 && moveset[i][1] === slices) {\n          sawone = true;\n        }\n      }\n      hasrotation[k] = sawone;\n    }\n    if (\n      this.options.addRotations &&\n      (this.options.moveList || this.options.fixedPieceType !== null)\n    ) {\n      for (let i = 0; i < this.moverotations.length; i++) {\n        addrot[i] = 0;\n      }\n      for (let k = 0; k < this.moveplanesets.length; k++) {\n        // if the move set includes a rotation around this axis, don't add any more\n        if (hasrotation[k]) {\n          addrot[k] = 3;\n          continue;\n        }\n        // does a rotation around k preserve the move set?\n        for (let i = 0; i < this.moverotations.length; i++) {\n          let nn = this.moveplanenormals[k];\n          for (let ii = 1; ii * 2 <= this.movesetorders[i]; ii++) {\n            nn = nn.rotatepoint(this.moverotations[i][0]);\n            if (addrot[i] & ii) {\n              continue;\n            }\n            let found = -1;\n            let neg = false;\n            for (let j = 0; j < this.moveplanenormals.length; j++) {\n              if (nn.dist(this.moveplanenormals[j]) < eps) {\n                found = j;\n                break;\n              } else if (nn.dist(this.moveplanenormals[j].smul(-1)) < eps) {\n                found = j;\n                neg = true;\n                break;\n              }\n            }\n            if (found < 0) {\n              throw new Error(\"Could not find rotation\");\n            }\n            const cmp = mps[found];\n            if (\n              cmp.length !== mps[k].length ||\n              this.moveplanesets[k].length !==\n                this.moveplanesets[found].length ||\n              this.diffmvsets(\n                cmp,\n                mps[k],\n                this.moveplanesets[found].length,\n                neg,\n              )\n            ) {\n              addrot[i] |= ii;\n            }\n          }\n        }\n      }\n      for (let i = 0; i < this.moverotations.length; i++) {\n        if (addrot[i] === 0) {\n          addrot[i] = 1;\n        } else if (addrot[i] === 1) {\n          if (this.movesetorders[i] > 3) {\n            addrot[i] = 2;\n          } else {\n            addrot[i] = 0;\n          }\n        } else if (addrot[i] === 3) {\n          addrot[i] = 0;\n        } else {\n          throw new Error(\"Impossible addrot val\");\n        }\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      if (addrot[k] !== 0 && !hasrotation[k]) {\n        mps[k].push([0, this.moveplanesets[k].length]);\n        mps[k].push(addrot[k]);\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveset = mps[k];\n      const movesetorder = this.movesetorders[k];\n      // check there's no redundancy in moveset.\n      for (let i = 0; i < moveset.length; i += 2) {\n        for (let j = 0; j < i; j += 2) {\n          if (\n            moveset[i][0] === moveset[j][0] &&\n            moveset[i][1] === moveset[j][1]\n          ) {\n            throw new Error(\"Redundant moves in moveset.\");\n          }\n        }\n      }\n      const allbits = [];\n      for (let i = 0; i < moveset.length; i += 2) {\n        for (let j = moveset[i][0]; j <= moveset[i][1]; j++) {\n          allbits[j] = 1;\n        }\n      }\n      const axiscmoves = this.cmovesbyslice[k];\n      for (let i = 0; i < axiscmoves.length; i++) {\n        if (allbits[i] !== 1) {\n          continue;\n        }\n        const slicecmoves = axiscmoves[i];\n        for (let j = 0; j < slicecmoves.length; j += 2 * movesetorder) {\n          if (this.skipcubie(slicecmoves[j])) {\n            continue;\n          }\n          const ind = this.cubiesetnums[slicecmoves[j]];\n          setmoves[ind] = 1;\n        }\n      }\n    }\n    for (let i = 0; i < this.cubiesetnames.length; i++) {\n      if (!setmoves[i]) {\n        continue;\n      }\n      if (this.omitSet(this.cubiesetnames[i])) {\n        setmoves[i] = 0;\n        continue;\n      }\n      setnames.push(this.cubiesetnames[i]);\n      setdefs.push(\n        new PGOrbitDef(\n          this.cubieords[i],\n          this.options.fixedOrientation ? 1 : this.orbitoris[i],\n        ),\n      );\n    }\n    const solved: PGOrbit[] = [];\n    for (let i = 0; i < this.cubiesetnames.length; i++) {\n      if (!setmoves[i]) {\n        continue;\n      }\n      if (this.omitSet(this.cubiesetnames[i])) {\n        continue;\n      }\n      const p = [];\n      const o = [];\n      for (let j = 0; j < this.cubieords[i]; j++) {\n        if (fortwisty) {\n          p.push(j);\n        } else {\n          const cubie = this.cubiesetcubies[i][j];\n          p.push(this.cubievaluemap[cubie]);\n        }\n        o.push(0);\n      }\n      solved.push(\n        new PGOrbit(\n          p,\n          o,\n          this.options.fixedOrientation ? 1 : this.orbitoris[i],\n        ),\n      );\n    }\n    const movenames: string[] = [];\n    const forcenames: boolean[] = [];\n    const moves: PGTransform[] = [];\n    const isrots: boolean[] = [];\n    if (includemoves) {\n      for (let k = 0; k < this.moveplanesets.length; k++) {\n        const moveplaneset = this.moveplanesets[k];\n        const slices = moveplaneset.length;\n        const moveset = mps[k];\n        const movesetgeo = this.movesetgeos[k];\n        for (let i = 0; i < moveset.length; i += 2) {\n          const movebits = moveset[i];\n          // did these movebits come from a specified move?\n          // if they did, we need to use that name.\n          let nameoverride: string | undefined;\n          let inverted = false;\n          if (this.parsedmovelist !== undefined) {\n            for (const parsedmove of this.parsedmovelist) {\n              if (parsedmove[1] !== k) {\n                continue;\n              }\n              let r = [];\n              if (parsedmove[4]) {\n                r = [parsedmove[2], parsedmove[3]];\n              } else {\n                r = [slices - parsedmove[3], slices - parsedmove[2]];\n              }\n              if (r[0] === movebits[0] && r[1] === movebits[1]) {\n                nameoverride = parsedmove[0];\n                inverted = !parsedmove[4];\n              }\n            }\n          }\n          if (nameoverride) {\n            movenames.push(nameoverride);\n            forcenames.push(true);\n          } else {\n            const mna = getmovename(movesetgeo, movebits, slices);\n            inverted = mna[1];\n            const movename = mna[0];\n            if (moveset[i + 1] === 1) {\n              movenames.push(movename);\n            } else {\n              movenames.push(movename + moveset[i + 1]);\n            }\n            forcenames.push(false);\n          }\n          isrots.push(movebits[0] === 0 && movebits[1] === slices);\n          const mv = this.getMoveFromBits(\n            movebits,\n            moveset[i + 1],\n            inverted,\n            this.cmovesbyslice[k],\n            setmoves,\n            this.movesetorders[k],\n          );\n          moves.push(mv);\n        }\n      }\n    }\n    let r = new PGOrbitsDef(\n      setnames,\n      setdefs,\n      new VisibleState(solved),\n      movenames,\n      moves,\n      isrots,\n      forcenames,\n    );\n    if (this.options.optimizeOrbits) {\n      r = r.optimize();\n    }\n    if (this.options.scrambleAmount !== 0) {\n      r.scramble(this.options.scrambleAmount);\n    }\n    return r;\n  }\n\n  public getScramble(n: number = 0): KTransformationData {\n    const od = this.getOrbitsDef(false);\n    return od.transformToKTransformationData(od.getScrambleTransformation(n));\n  }\n\n  public getMovesAsPerms(): Perm[] {\n    return this.getOrbitsDef(false).moveops.map((_) => _.toPerm());\n  }\n\n  public showcanon(disp: (s: string) => void): void {\n    // show information for canonical move derivation\n    showcanon(this.getOrbitsDef(false), disp);\n  }\n\n  public getsolved(): Perm {\n    // get a solved position\n    const r = [];\n    for (let i = 0; i < this.baseFaceCount; i++) {\n      for (let j = 0; j < this.stickersperface; j++) {\n        r.push(i);\n      }\n    }\n    return new Perm(r);\n  }\n\n  // Given a rotation description that says to align feature1\n  // with a given vector, and then as much as possible feature2\n  // with another given vector, return a Quaternion that\n  // performs this rotation.\n  private getOrientationRotation(desiredRotation: any[]): Quat {\n    const [feature1name, [x1, y1, z1]] = desiredRotation[0];\n    const direction1 = new Quat(0, x1, -y1, z1);\n\n    const [feature2name, [x2, y2, z2]] = desiredRotation[1];\n    const direction2 = new Quat(0, x2, -y2, z2);\n    let feature1: Quat | null = null;\n    let feature2: Quat | null = null;\n    const feature1geoname = this.swizzler.unswizzle(feature1name);\n    const feature2geoname = this.swizzler.unswizzle(feature2name);\n    for (const gn of this.geonormals) {\n      if (feature1geoname === gn[1]) {\n        feature1 = gn[0];\n      }\n      if (feature2geoname === gn[1]) {\n        feature2 = gn[0];\n      }\n    }\n    if (!feature1) {\n      throw new Error(`Could not find feature ${feature1name}`);\n    }\n    if (!feature2) {\n      throw new Error(`Could not find feature ${feature2name}`);\n    }\n    const r1 = feature1.pointrotation(direction1);\n    const feature2rot = feature2.rotatepoint(r1);\n    const r2 = feature2rot\n      .unproject(direction1)\n      .pointrotation(direction2.unproject(direction1));\n    return r2.mul(r1);\n  }\n\n  private getInitial3DRotation(): Quat {\n    const basefacecount = this.baseFaceCount;\n    let orientationDescription: FaceBasedOrientationDescription | null = null;\n    if (this.options.puzzleOrientation) {\n      orientationDescription = this.options.puzzleOrientation;\n    } else if (this.options.puzzleOrientations) {\n      orientationDescription = this.options.puzzleOrientations[basefacecount];\n    }\n    // either no option specified or no matching key in\n    // puzzleOrientations.\n    if (!orientationDescription) {\n      orientationDescription = defaultOrientations()[basefacecount];\n    }\n    if (!orientationDescription) {\n      throw new Error(\"No default orientation?\");\n    }\n    return this.getOrientationRotation(orientationDescription);\n  }\n\n  private generate2dmapping(\n    w: number = 800,\n    h: number = 500,\n    trim: number = 10,\n    threed: boolean = false,\n    twodshrink: number = 0.92,\n  ): (fn: number, q: Quat) => number[] {\n    // generate a mapping to use for 2D for textures, svg\n    w -= 2 * trim;\n    h -= 2 * trim;\n    function extendedges(a: number[][], n: number): void {\n      let dx = a[1][0] - a[0][0];\n      let dy = a[1][1] - a[0][1];\n      const ang = (2 * Math.PI) / n;\n      const cosa = Math.cos(ang);\n      const sina = Math.sin(ang);\n      for (let i = 2; i < n; i++) {\n        const ndx = dx * cosa + dy * sina;\n        dy = dy * cosa - dx * sina;\n        dx = ndx;\n        a.push([a[i - 1][0] + dx, a[i - 1][1] + dy]);\n      }\n    }\n    // Find a net from a given face count.  Walk it, assuming we locate\n    // the first edge from (0,0) to (1,1) and compute the minimum and\n    // maximum vertex locations from this.  Then do a second walk, and\n    // assign the actual geometry.\n    this.genperms();\n    const boundarygeo = this.getboundarygeometry();\n    const face0 = boundarygeo.facenames[0][0];\n    const polyn = face0.length; // number of vertices; 3, 4, or 5\n    const net = this.net;\n    if (net === null) {\n      throw new Error(\"No net?\");\n    }\n    const edges: any = {};\n    let minx = 0;\n    let miny = 0;\n    let maxx = 1;\n    let maxy = 0;\n    edges[net[0][0]] = [\n      [1, 0],\n      [0, 0],\n    ];\n    extendedges(edges[net[0][0]], polyn);\n    for (const neti of net) {\n      const f0 = neti[0];\n      if (!edges[f0]) {\n        throw new Error(\"Bad edge description; first edge not connected.\");\n      }\n      for (let j = 1; j < neti.length; j++) {\n        const f1 = neti[j];\n        if (f1 === \"\" || edges[f1]) {\n          continue;\n        }\n        edges[f1] = [edges[f0][j % polyn], edges[f0][(j + polyn - 1) % polyn]];\n        extendedges(edges[f1], polyn);\n      }\n    }\n    for (const f in edges) {\n      const es = edges[f];\n      for (const esi of es) {\n        minx = Math.min(minx, esi[0]);\n        maxx = Math.max(maxx, esi[0]);\n        miny = Math.min(miny, esi[1]);\n        maxy = Math.max(maxy, esi[1]);\n      }\n    }\n    const sc = Math.min(w / (maxx - minx), h / (maxy - miny));\n    const xoff = 0.5 * (w - sc * (maxx + minx));\n    const yoff = 0.5 * (h - sc * (maxy + miny));\n    const geos: Record<string, Quat[]> = {};\n    const bg = this.getboundarygeometry();\n    const edges2: any = {};\n    const initv = [\n      [sc + xoff, yoff],\n      [xoff, yoff],\n    ];\n    edges2[net[0][0]] = initv;\n    extendedges(edges2[net[0][0]], polyn);\n    geos[this.facenames[0][1]] = this.project2d(0, 0, [\n      new Quat(0, initv[0][0], initv[0][1], 0),\n      new Quat(0, initv[1][0], initv[1][1], 0),\n    ]);\n    const connectat = [];\n    connectat[0] = 0;\n    for (const neti of net) {\n      const f0 = neti[0];\n      if (!edges2[f0]) {\n        throw new Error(\"Bad edge description; first edge not connected.\");\n      }\n      let gfi = -1;\n      for (let j = 0; j < bg.facenames.length; j++) {\n        if (f0 === bg.facenames[j][1]) {\n          gfi = j;\n          break;\n        }\n      }\n      if (gfi < 0) {\n        throw new Error(`Could not find first face name ${f0}`);\n      }\n      const thisface = bg.facenames[gfi][0];\n      for (let j = 1; j < neti.length; j++) {\n        const f1 = neti[j];\n        if (f1 === \"\" || edges2[f1]) {\n          continue;\n        }\n        edges2[f1] = [\n          edges2[f0][j % polyn],\n          edges2[f0][(j + polyn - 1) % polyn],\n        ];\n        extendedges(edges2[f1], polyn);\n        // what edge are we at?\n        const caf0 = connectat[gfi];\n        const mp = thisface[(caf0 + j) % polyn]\n          .sum(thisface[(caf0 + j + polyn - 1) % polyn])\n          .smul(0.5);\n        const epi = findelement(bg.edgenames, mp);\n        const edgename = bg.edgenames[epi][1];\n        const el = splitByFaceNames(edgename, this.facenames);\n        const gf1 = el[f0 === el[0] ? 1 : 0];\n        let gf1i = -1;\n        for (let k = 0; k < bg.facenames.length; k++) {\n          if (gf1 === bg.facenames[k][1]) {\n            gf1i = k;\n            break;\n          }\n        }\n        if (gf1i < 0) {\n          throw new Error(\"Could not find second face name\");\n        }\n        const otherface = bg.facenames[gf1i][0];\n        for (let k = 0; k < otherface.length; k++) {\n          const mp2 = otherface[k].sum(otherface[(k + 1) % polyn]).smul(0.5);\n          if (mp2.dist(mp) <= eps) {\n            const p1 = edges2[f0][(j + polyn - 1) % polyn];\n            const p2 = edges2[f0][j % polyn];\n            connectat[gf1i] = k;\n            geos[gf1] = this.project2d(gf1i, k, [\n              new Quat(0, p2[0], p2[1], 0),\n              new Quat(0, p1[0], p1[1], 0),\n            ]);\n            break;\n          }\n        }\n      }\n    }\n    let hix = 0;\n    let hiy = 0;\n    const rot = this.getInitial3DRotation();\n    for (let face of this.faces) {\n      if (threed) {\n        face = face.rotate(rot);\n      }\n      for (let j = 0; j < face.length; j++) {\n        hix = Math.max(hix, Math.abs(face.get(j).b));\n        hiy = Math.max(hiy, Math.abs(face.get(j).c));\n      }\n    }\n    const sc2 = Math.min(h / hiy / 2, (w - trim) / hix / 4);\n    const mappt2d = (fn: number, q: Quat): number[] => {\n      if (threed) {\n        q = q.rotatepoint(rot);\n        const xoff2 = 0.5 * trim + 0.25 * w;\n        const xmul = this.baseplanes[fn].rotateplane(rot).d < 0 ? 1 : -1;\n        return [\n          trim + w * 0.5 + xmul * (xoff2 - q.b * sc2),\n          trim + h * 0.5 + q.c * sc2,\n        ];\n      } else {\n        const g = geos[this.facenames[fn][1]];\n        return [\n          trim + twodshrink * q.dot(g[0]) + g[2].b,\n          trim + h - twodshrink * q.dot(g[1]) - g[2].c,\n        ];\n      }\n    };\n    return mappt2d;\n  }\n\n  public generatesvg(\n    w: number = 800,\n    h: number = 500,\n    trim: number = 10,\n    threed: boolean = false,\n  ): string {\n    const mappt2d = this.generate2dmapping(w, h, trim, threed);\n    function drawedges(id: string, pts: number[][], color: string): string {\n      return `<polygon id=\"${id}\" class=\"sticker\" style=\"fill: ${color}\" points=\"${pts\n        .map((p) => `${p[0]} ${p[1]}`)\n        .join(\" \")}\"/>\\n`;\n    }\n    // Let's build arrays for faster rendering.  We want to map from geo\n    // base face number to color, and we want to map from geo face number\n    // to 2D geometry.  These can be reused as long as the puzzle overall\n    // orientation and canvas size remains unchanged.\n    const pos = this.getsolved();\n    const colormap = [];\n    const facegeo = [];\n    for (let i = 0; i < this.baseFaceCount; i++) {\n      colormap[i] = this.colors[this.facenames[i][1]];\n    }\n    for (let i = 0; i < this.faces.length; i++) {\n      const face = this.faces[i];\n      const facenum = Math.floor(i / this.stickersperface);\n      const fg = [];\n      for (let j = 0; j < face.length; j++) {\n        fg.push(mappt2d(facenum, face.get(j)));\n      }\n      facegeo.push(fg);\n    }\n    const svg = [];\n    // group each base face so we can add a hover element\n    for (let j = 0; j < this.baseFaceCount; j++) {\n      svg.push(\"<g>\");\n      svg.push(`<title>${this.facenames[j][1]}</title>\\n`);\n      for (let ii = 0; ii < this.stickersperface; ii++) {\n        const i = j * this.stickersperface + ii;\n        const cubie = this.facetocubie[i];\n        const cubieori = this.facetoord[i];\n        const cubiesetnum = this.cubiesetnums[cubie];\n        const cubieord = this.cubieordnums[cubie];\n        const color = this.graybyori(cubie) ? \"#808080\" : colormap[pos.p[i]];\n        let id = `${this.cubiesetnames[cubiesetnum]}-l${cubieord}-o${cubieori}`;\n        svg.push(drawedges(id, facegeo[i], color));\n        if (this.duplicatedFaces[i]) {\n          for (let jj = 1; jj < this.duplicatedFaces[i]; jj++) {\n            id = `${this.cubiesetnames[cubiesetnum]}-l${cubieord}-o${jj}`;\n            svg.push(drawedges(id, facegeo[i], color));\n          }\n        }\n      }\n      svg.push(\"</g>\");\n    }\n    const html = `<svg id=\"svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 800 500\">\\n<style type=\"text/css\"><![CDATA[.sticker { stroke: #000000; stroke-width: 1px; }]]></style>\\n${svg.join(\n      \"\",\n    )}</svg>`;\n    return html;\n  }\n\n  // The colorfrac parameter says how much of the face should be\n  // colored (vs dividing lines); we default to 0.77 which seems\n  // to work pretty well.  It should be a number between probably\n  // 0.4 and 0.9.\n  public get3d(options?: { stickerColors?: string[] }): StickerDat {\n    const stickers = [];\n    const rot = this.getInitial3DRotation();\n    const faces = [];\n    const maxdist: number = 0.52 * this.basefaces[0].get(0).len();\n    for (let i = 0; i < this.basefaces.length; i++) {\n      const coords = this.basefaces[i].rotate(rot);\n      const name = this.facenames[i][1];\n      faces.push({ coords: toFaceCoords(coords, maxdist), name });\n    }\n    for (let i = 0; i < this.faces.length; i++) {\n      const facenum = Math.floor(i / this.stickersperface);\n      const cubie = this.facetocubie[i];\n      const cubieori = this.facetoord[i];\n      const cubiesetnum = this.cubiesetnums[cubie];\n      const cubieord = this.cubieordnums[cubie];\n      let color = this.graybyori(cubie)\n        ? \"#808080\"\n        : this.colors[this.facenames[facenum][1]];\n      if (options?.stickerColors) {\n        color = options.stickerColors[i];\n      }\n      const coords = this.faces[i].rotate(rot);\n      stickers.push({\n        coords: toFaceCoords(coords, maxdist),\n        color,\n        orbit: this.cubiesetnames[cubiesetnum],\n        ord: cubieord,\n        ori: cubieori,\n        face: facenum,\n      });\n      let fcoords = coords;\n      if (this.duplicatedFaces[i]) {\n        const rotdist = fcoords.length / this.duplicatedFaces[i];\n        for (let jj = 1; jj < this.duplicatedFaces[i]; jj++) {\n          for (let k = 0; k < rotdist; k++) {\n            fcoords = fcoords.rotateforward();\n          }\n          stickers.push({\n            coords: toFaceCoords(fcoords, maxdist),\n            color,\n            orbit: this.cubiesetnames[cubiesetnum],\n            ord: cubieord,\n            ori: jj,\n            face: facenum,\n            isDup: true,\n          });\n        }\n      }\n    }\n    const grips: StickerDatAxis[] = [];\n    for (let i = 0; i < this.movesetgeos.length; i++) {\n      const msg = this.movesetgeos[i];\n      const order = this.movesetorders[i];\n      for (const gn of this.geonormals) {\n        if (msg[0] === gn[1] && msg[1] === gn[2]) {\n          grips.push({\n            coordinates: toCoords(gn[0].rotatepoint(rot), 1),\n            quantumMove: new Move(msg[0]),\n            order,\n          });\n          grips.push({\n            coordinates: toCoords(gn[0].rotatepoint(rot).smul(-1), 1),\n            quantumMove: new Move(msg[2]),\n            order,\n          });\n        }\n      }\n    }\n    const twodmapper = this.generate2dmapping(2880, 2160, 0, false, 1.0);\n    const g = (function () {\n      const irot = rot.invrot();\n      return function (facenum: number, coords: number[]): number[] {\n        let q = new Quat(\n          0,\n          coords[0] * maxdist,\n          -coords[1] * maxdist,\n          coords[2] * maxdist,\n        );\n        q = q.rotatepoint(irot);\n        const x = twodmapper(facenum, q);\n        x[0] /= 2880;\n        x[1] = 1 - x[1] / 2160;\n        return x;\n      };\n    })().bind(this);\n    return {\n      stickers,\n      faces,\n      axis: grips,\n      unswizzle: this.unswizzle.bind(this),\n      notationMapper: this.notationMapper,\n      textureMapper: { getuv: g },\n    };\n  }\n\n  //  From the name of a geometric element (face, vertex, edge), get a\n  //  normal vector respecting the default orientation.  This is useful\n  //  to define the initial position of the camera in a 3D scene.  The\n  //  return value is normalized, so multiply it by the camera distance.\n  //  Returns undefined if no such geometric element.\n  public getGeoNormal(geoname: string): number[] | undefined {\n    const rot = this.getInitial3DRotation();\n    const grip = this.swizzler.unswizzle(geoname);\n    for (const gn of this.geonormals) {\n      if (grip === gn[1]) {\n        const r = toCoords(gn[0].rotatepoint(rot), 1);\n        //  This routine is intended to use for the camera location.\n        //  If the camera location is vertical, and we give some\n        //  near-zero values for x and z, then the rotation in the\n        //  X/Z plane will be somewhat arbitrary.  So we clean up the\n        //  returned vector here.  We give a very slight positive\n        //  z value.\n        if (Math.abs(r[0]) < eps && Math.abs(r[2]) < eps) {\n          r[0] = 0.0;\n          r[2] = 1e-6;\n        }\n        return r;\n      }\n    }\n    return undefined;\n  }\n\n  private getfaceindex(facenum: number): number {\n    const divid = this.stickersperface;\n    return Math.floor(facenum / divid);\n  }\n\n  public textForTwizzleExplorer(): string {\n    return `Faces ${this.baseplanerot.length}\nStickers per face ${this.stickersperface}\nShort edge ${this.shortedge}\nCubies ${this.cubies.length}\nEdge distance ${this.edgedistance}\nVertex distance ${this.vertexdistance}`;\n  }\n\n  writeSchreierSims(tw: (s: string) => void) {\n    const os = this.getOrbitsDef(false);\n    const as = os.reassemblySize();\n    tw(`Reassembly size is ${as}`);\n    const ss = schreierSims(this.getMovesAsPerms(), tw);\n    const r = as / ss;\n    tw(`Ratio is ${r}`);\n  }\n}\n\nexport class PGNotation {\n  private orbitNames: string[];\n  constructor(private pg: PuzzleGeometry, od: PGOrbitsDef) {\n    this.orbitNames = od.orbitnames;\n  }\n\n  public lookupMove(move: Move): KTransformationData | null {\n    const mv = this.pg.parseMove(move);\n    // if a move list subset is defined, don't return moves outside the subset.\n    if (this.pg.parsedmovelist) {\n      let found = false;\n      for (const parsedmove of this.pg.parsedmovelist) {\n        if (\n          parsedmove[1] === mv[1] &&\n          parsedmove[2] === mv[2] &&\n          parsedmove[3] === mv[3] &&\n          parsedmove[4] === mv[4]\n        ) {\n          found = true;\n        }\n      }\n      if (!found) {\n        return null;\n      }\n    }\n    let bits = [mv[2], mv[3]];\n    if (!mv[4]) {\n      const slices = this.pg.moveplanesets[mv[1]].length;\n      bits = [slices - mv[3], slices - mv[2]];\n    }\n    const pgmv = this.pg.getMoveFromBits(\n      bits,\n      mv[5],\n      !mv[4],\n      this.pg.cmovesbyslice[mv[1]],\n      undefined,\n      this.pg.movesetorders[mv[1]],\n    );\n    const r = PGOrbitsDef.transformToKTransformationData(this.orbitNames, pgmv);\n    return r;\n  }\n}\n"],"names":["FaceNameSwizzler","facenames","gripnames_arg","prefixFree","gripnames","this","i","length","j","startsWith","names","s","r","at","currentMatch","substr","Error","push","list","sep","join","userinput","longname","e1","splitByFaceNames","e2","found","e","endsWith","spinmatch","slice","upperCaseGrip","toUpperCase","g","NullMapper","move","FTONotationMapper","child","sw","family","innerLayer","outerLayer","Move","QuantumMove","amount","notationToInternal","fam","substring","notationToExternal","FaceRenamingMapper","internalNames","externalNames","grip","a","b","suffix","upper","isLowerCase","joinByFaceIndices","toLowerCase","ngrip","convertString","convert","MegaminxScramblingNotationMapper","Math","abs","NxNxNCubeMapper","slices","pyraminxFamilyMap","U","L","R","B","u","l","Uv","Lv","Rv","Bv","D","F","BL","BR","tetraminxFamilyMap","d","f","bl","br","pyraminxFamilyMapWCA","pyraminxExternalQuantumY","pyraminxInternalQuantumY","PyraminxNotationMapper","wcaHack","map","newFamilyWCA","newFamily","isIdentical","quantum","Object","entries","external","internal","TetraminxNotationMapper","skewbFamilyMap","UL","UR","ULv","Fv","URv","Dv","skewbExternalQuantumX","skewbInternalQuantumX","skewbInternalQuantumXPrime","skewbExternalQuantumY","skewbInternalQuantumY","skewbInternalQuantumYPrime","skewbExternalQuantumZ","skewbInternalQuantumZ","skewbInternalQuantumZPrime","SkewbNotationMapper","spinmatchv","parseOptions","argv","argp","options","option","addRotations","allMoves","outerBlockMoves","vertexMoves","includeCornerOrbits","includeEdgeOrbits","fixedOrientation","includeCenterOrbits","excludeOrbits","split","moveList","optimizeOrbits","scrambleAmount","fixedPieceType","orientCenters","puzzleOrientation","JSON","parse","puzzleDescription","parsePuzzleDescription","PuzzleGeometryFullOptions","verbosity","grayCorners","grayCenters","grayEdges","puzzleOrientations","assign","zeroCache","iotaCache","zeros","n","c","Array","iota","lcm","t","m","gcd","Perm","p","p2","cyc","seen","incyc","cs","PGOrbitDef","size","mod","BigInt","factorial","lastGlobalDefinitionCounter","externalName","mapper","moveString","mv","mv2","toString","PGOrbitsDef","orbitnames","orbitdefs","solved","movenames","moveops","isRotation","forcenames","mp","orbits","toKPuzzle","mvname","pd","perm","ori","name","result","describeSet","appendDefinition","doinv","inv","includemoves","start","numPieces","numOrientations","startTransformation","pieces","permutation","orientation","moves","transformToKTransformationData","startStateData","neworbitnames","neworbitdefs","newsolved","newmoveops","om","du","DisjointUnion","changed","k","union","keepori","duo","o","find","nontriv","multiple","h","no","on","nv","remapVS","remap","killOri","VisibleState","_","PGTransform","mul","getScrambleTransformation","pool","floor","random","ri","rj","rm","reassemblySize","_PGOrbit","orimod","newPerm","newOri","done","v","toPerm","order","nextNew","reassign","ov","useVS","concise","isIdentity","zeroOris","newori","kcache","PGOrbit","PGTransformBase","newOrbits","orbit","equal","perms","identicalPieces","internalMul","internalInv","heads","ah","bh","PGPuzzles","skewb","helicopter","dino","pyramorphix","mastermorphix","pyraminx","tetraminx","megaminx","gigaminx","teraminx","petaminx","examinx","zetaminx","yottaminx","pentultimate","starminx","chopasaurus","FTO","octastar","icosamate","eps","centermassface","face","Quat","sum","smul","solvethreeplanes","p1","p3","planes","intersect3","dt","q","hypot","sqrt","dot","normalize","acos","a00","a01","a02","a10","a11","a12","a20","a21","a22","invrot","ab","ac","ad","cross","sub","len","orthogonal","rotatepoint","det","det3x3","x","side","inout","nface","kk","vk","pt","faces","nfaces","cutface","dist","uniqueplanes","planerot","rotateplane","wasseen","getface","FactoredNumber","mult","schreierSims","disp","identity","sgs","sgsi","sgslen","Tk","Tklen","knutha","knuthb","resolve","none","sz","tks","sollen","avgs","mults","cnt","lensum","multiply","avg","getsgs","Face","coords","off","sx","sy","get","FaceTree","left","right","arr","leftfirst","collect","orientationDefaults","findelement","getPG3DNamedPuzzles","getPuzzleDescriptionString","puzzleName","PUZZLE_BASE_SHAPES","PUZZLE_CUT_TYPES","filter","Boolean","shape","cuts","cutType","distance","parseFloat","getPuzzleGeometryByDesc","desc","parsed","pg","PuzzleGeometry","allstickers","genperms","getPuzzleGeometryByName","getmovename","geo","bits","inverted","movenameFamily","movenamePrefix","String","facename","toCoords","maxdist","toFaceCoords","cmovesbyslice","duplicatedFaces","duplicatedCubies","fixedCubie","net","colors","notationMapper","addNotationMapper","setReidOrder","console","log","header","create","moveplanes","moveplanes2","cubies","s5","cube","octahedron","dx","dy","dd","ang","PI","cos","sin","icosahedron","d36","dodecahedron","rotations","ns","negns","closure","baseplane","baseplanerot","baseplanes","baseFaceCount","BB","C","A","E","BF","I","G","S","H","J","K","M","O","P","N","Q","baseface","zero","facenormal","makenormal","edgenormal","vertexnormal","boundary","firstface","edgedistance","vertexdistance","cutplanes","intersects","sawface","sawedge","sawvertex","cut","normal","makecut","basefaces","rotateface","faceplanes","vertexnames","edgenames","edgesperface","searchaddelement","el","jj","otherfaces","facelist","facenametoindex","faceindextoname","neti","fi","ii","fn2","of","faceplane","midpoint","jjj","midpoint2","swizzler","oridata","markedface","oriprefs","fn","f1","f2","c1","c2","st","geonormals","edgename","vertexname","geonormalnames","setGripNames","rotation","moveplane","sameplane","ft","tar","rval","stickersperface","simplerot","cm","finished","sortme","cm2","centermass","sort","rot","rotate","shortedge","keyface2","sfcc","fromCharCode","moveplanesets","moveplaneset","dv","key","facelisthash","face2","facecentermass","facen","edgen","targvec","edgen2","plane","x0","olen","y0","delta","cosr","sinr","x1","y1","rots","expandfaces","moveplanenormals","qnormal","moveplanenormal","normalizeplane","goodnormal","sizes","moverotations","angle","reverse","sizes2","movesetorders","movesetgeos","gtype","p0","neg","pos","geonormal","Map","keyface","suff","s2","set","facetocubie","facetoord","values","cmall","looplimit","mini","ofacelist","typenames","cubiesetnames","cubietypecounts","orbitoris","cubiesetnum","cubiesetnums","cubieordnums","cubieords","cubievaluemap","getcolorkey","cubienum","getfaceindex","cubiesetcubies","cubie","cubiekeymap","cubievalueid","facecnt","typectr","typename","queue","qg","cind","cubiecolorkey","moverotation","tq","findface","reidmap","reidorder","mask","charCodeAt","cubieset","newmv","modified","unswizzle","re","RegExp","match","loslice","hislice","parseInt","amountstr","bm","fullrotation","msi","geoname","firstgrip","parseMove","stringToBlockMove","center","towards","hiv","hii","hii2","qs","slicenum","slicecnts","bhi","axiscmoves","sc","cubiedone","ocm","fi2","face1","face0","parsedmovelist","parsemove","clear","parsedmove","msg","dep","keyface3","newr","skipbyori","comment","os","getOrbitsDef","mvs","movename","toGap","ip","__","od","toKsolve","fortwisty","internalDefinition","toKPuzzleDefinition","experimentalPuzzleDescription","moverange","setmoves","movesetorder","moveorbits","oris","slicecmoves","mperm","setnum","inc","oinc","lastId","mulScalar","excludedSet","setnames","setdefs","mps","addrot","moveset","getmovesets","hasrotation","sawone","nn","cmp","diffmvsets","allbits","skipcubie","ind","omitSet","isrots","movesetgeo","movebits","nameoverride","mna","getMoveFromBits","optimize","scramble","orders","commutes","permA","permB","curlev","nextlev","uniq","sti","nst","showcanon","desiredRotation","feature1name","z1","direction1","feature2name","x2","y2","z2","direction2","feature1","feature2","feature1geoname","feature2geoname","gn","r1","pointrotation","unproject","basefacecount","orientationDescription","getOrientationRotation","w","trim","threed","twodshrink","extendedges","cosa","sina","ndx","boundarygeo","getboundarygeometry","polyn","edges","minx","miny","maxx","maxy","f0","es","esi","min","max","xoff","yoff","geos","bg","edges2","initv","project2d","connectat","gfi","thisface","caf0","epi","gf1","gf1i","otherface","mp2","hix","hiy","getInitial3DRotation","sc2","mappt2d","xoff2","xmul","generate2dmapping","drawedges","id","pts","color","getsolved","colormap","facegeo","facenum","fg","svg","cubieori","cubieord","graybyori","html","stickers","stickerColors","ord","fcoords","rotdist","rotateforward","isDup","grips","coordinates","quantumMove","twodmapper","irot","bind","axis","textureMapper","getuv","divid","tw","as","ss","getMovesAsPerms","PGNotation","orbitNames","pgmv"],"sourceRoot":""}